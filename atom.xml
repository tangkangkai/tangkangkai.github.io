<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-07-14T17:46:08-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[String to Integer (Atoi)]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/14/string-to-integer-atoi/"/>
    <updated>2014-07-14T17:38:56-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/14/string-to-integer-atoi</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/string-to-integer-atoi/">Question</a></p>

<hr />
<p>This question is complicated at the requirement need by <em>atoi()</em> function. At least these requirements need be met:</p>

<pre><code>* The leading invalid character(not number, + or -) could only be space
* After getting the first valid character, if there appears a invalid character, the string stops there. e.g. "123a2" will return 123.
* If string value out range of integer, return INT_MAX (2147483647) or INT_MIN (-2147483648) 
</code></pre>

<p>In my implementation, I use <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">StringBuilder</a> to store the valid string. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">int</span> atoi(<span class="predefined-type">String</span> str) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="predefined-type">StringBuilder</span> sb = <span class="keyword">new</span> <span class="predefined-type">StringBuilder</span>();
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">int</span> index = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="type">int</span> signFlag = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="type">char</span> c;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="comment">/* Truncate the leading invalid characters, get the sign of the integer */</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">while</span> (index &lt; str.length()) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            c = str.charAt(index);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            <span class="keyword">if</span> ((c &gt;= <span class="string"><span class="delimiter">'</span><span class="content">0</span><span class="delimiter">'</span></span> &amp;&amp; c &lt;= <span class="string"><span class="delimiter">'</span><span class="content">9</span><span class="delimiter">'</span></span>) || c == <span class="string"><span class="delimiter">'</span><span class="content">+</span><span class="delimiter">'</span></span> || c == <span class="string"><span class="delimiter">'</span><span class="content">-</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content">-</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                    signFlag = -<span class="integer">1</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                    index++;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                } 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content">+</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                    index++;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span>){
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                index++;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                <span class="comment">/* the invalid leading character could only be space */</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        <span class="comment">/* Get the valid string */</span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        <span class="keyword">while</span> (index &lt; str.length()) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>            c = str.charAt(index);
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>            <span class="comment">/* invalid sign */</span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>            <span class="keyword">if</span> (c &gt;= <span class="string"><span class="delimiter">'</span><span class="content">0</span><span class="delimiter">'</span></span> &amp;&amp; c &lt;= <span class="string"><span class="delimiter">'</span><span class="content">9</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                sb.append(c);
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>            }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            index++;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        }
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>        <span class="comment">/* change string to integer */</span>
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>        <span class="type">int</span> base = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        <span class="type">int</span> returnValue = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>        <span class="type">int</span> newReturnValue = returnValue;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>        <span class="keyword">if</span> (signFlag == <span class="integer">1</span>) {
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = sb.length() - <span class="integer">1</span>; i &gt;= <span class="integer">0</span>; i--) {
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>                newReturnValue = (<span class="type">int</span>) (returnValue + ((<span class="type">int</span>) (sb.charAt(i)) - <span class="integer">48</span>) * <span class="predefined-type">Math</span>.pow(<span class="integer">10</span>, base++));
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>                <span class="keyword">if</span> (newReturnValue &lt; returnValue) {
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>                    <span class="comment">/* out of the range */</span>
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>                    <span class="keyword">return</span> <span class="predefined-type">Integer</span>.MAX_VALUE;
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>                }
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>                returnValue = newReturnValue;
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>            }
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = sb.length() - <span class="integer">1</span>; i &gt;= <span class="integer">0</span>; i--) {
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>                newReturnValue = (<span class="type">int</span>) (returnValue - ((<span class="type">int</span>) (sb.charAt(i)) - <span class="integer">48</span>) * <span class="predefined-type">Math</span>.pow(<span class="integer">10</span>, base++));
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>                <span class="keyword">if</span> (newReturnValue &gt; returnValue) {
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>                    <span class="comment">/* out of the range */</span>
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>                    <span class="keyword">return</span> <span class="predefined-type">Integer</span>.MIN_VALUE;
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>                }
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>                returnValue = newReturnValue;
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>            }
<span class="line-numbers"><a href="#n66" name="n66">66</a></span>        }
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>        <span class="keyword">return</span> returnValue;
<span class="line-numbers"><a href="#n69" name="n69">69</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implement strStr()]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/14/implement-strstr/"/>
    <updated>2014-07-14T16:33:13-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/14/implement-strstr</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/implement-strstr/">Question</a></p>

<hr />
<p>We get the length of needle, traverse through haystack to get substrings with length same with needle, compare them to see if they are equal, say the substring <em>ss</em>. If so we can return the substring of haystack starting from the first index of <em>ss</em>. If no one match, we return null. The code follows below:</p>

<p>Ref:<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#substring%28int%29">String.subString</a></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> strStr(<span class="predefined-type">String</span> haystack, <span class="predefined-type">String</span> needle) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (haystack.equals(needle)) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> haystack;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="type">int</span> len = needle.length();
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; haystack.length() - len; i++) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            <span class="keyword">if</span> (haystack.substring(i, i + len).equals(needle)) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                <span class="keyword">return</span> haystack.substring(i);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Valid Palindrome]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/14/valid-palindrome/"/>
    <updated>2014-07-14T16:11:19-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/14/valid-palindrome</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/valid-palindrome/">Question</a></p>

<hr />
<p>We compare the first and last alphanumeric character, if they are not equal return false directly otherwise keep comparing until there is only one or no character left in the string. Here is the code:</p>

<p>Ref: <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isLetterOrDigit%28char%29">Character.isLetterOrDigit</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#toLowerCase%28char%29">Character.toLowerCase</a></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">boolean</span> isPalindrome(<span class="predefined-type">String</span> s) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">int</span> firstIndex = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="type">char</span> firstChar;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="type">int</span> lastIndex = s.length() - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="type">char</span> lastChar;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="keyword">while</span> (firstIndex &lt; lastIndex) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="comment">/* only alphanumeric */</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="keyword">if</span> (!<span class="predefined-type">Character</span>.isLetterOrDigit((firstChar = s.charAt(firstIndex)))) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                firstIndex++;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="keyword">if</span> (!<span class="predefined-type">Character</span>.isLetterOrDigit((lastChar = s.charAt(lastIndex)))) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                lastIndex--;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                <span class="keyword">continue</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            <span class="comment">/* Ignore Case */</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            <span class="keyword">if</span> (<span class="predefined-type">Character</span>.toLowerCase(firstChar) != <span class="predefined-type">Character</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                    .toLowerCase(lastChar)) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>            firstIndex++;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>            lastIndex--;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        <span class="keyword">return</span> <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    }
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse Nodes in k-Group]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/13/reverse-nodes-in-k-groupreverse-nodes-in-k-group/"/>
    <updated>2014-07-13T22:35:55-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/13/reverse-nodes-in-k-groupreverse-nodes-in-k-group</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/reverse-nodes-in-k-group/">Question</a></p>

<hr />
<p>This question is similar to <a href="http://www.codertkk.com/blog/2014/07/13/swap-nodes-in-pairs/">Swap Nodes in Pairs</a>. The difference is we form a group of <em>k</em> nodes and reverse them rather than just easily swap two nodes. But the procedure is similar, here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode reverseKGroup(ListNode head, <span class="type">int</span> k) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span> || head.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode pointerNode = head;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="type">int</span> index = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="comment">/* Get a group of k nodes, if there is less than k nodes, return head */</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="keyword">while</span> (index &lt; k) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            pointerNode = pointerNode.next;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="keyword">if</span>(pointerNode == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                <span class="keyword">return</span> head;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            index++;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        <span class="comment">/* Get the next node we need recursively call the function on */</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        ListNode nextGroupNode = pointerNode.next;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        ListNode prev = head;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        ListNode curr = head;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        ListNode next = head.next;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        <span class="comment">/* Reverse the nodes in the group */</span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        <span class="keyword">while</span>(next != nextGroupNode) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            curr = next;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>            next = next.next;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>            curr.next = prev;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>            prev = curr;
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        }
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        <span class="comment">/* Recursively call the function on the head of the next group */</span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>        head.next = reverseKGroup(nextGroupNode, k);
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>        
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>        <span class="keyword">return</span> curr;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swap Nodes in Pairs]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/13/swap-nodes-in-pairs/"/>
    <updated>2014-07-13T22:05:48-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/13/swap-nodes-in-pairs</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/swap-nodes-in-pairs/">Question</a></p>

<hr />
<p>For this question, we can firstly swap the first and second node, then point the second node to the result of calling function(recursively) on the third node. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode swapPairs(ListNode head) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span> || head.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode headNode = head.next;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ListNode thirdNode = headNode.next;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        headNode.next = head;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        head.next = swapPairs(thirdNode);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">return</span> headNode;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Nth Node From End of List]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/13/remove-nth-node-from-end-of-list/"/>
    <updated>2014-07-13T21:37:56-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/13/remove-nth-node-from-end-of-list</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/remove-nth-node-from-end-of-list/">Question</a></p>

<hr />
<p>We need two pointers, first(<em>beforeRemovedNode</em> in the code) pointing to the head node, the next(<em>pointNode</em> in the code) pointing to the node <em>n</em> positions after head node. Then we move both pointer to its <em>next</em> position in the same time until the pointNode’s <em>next</em> is null. The we can remove the node just after <em>beforeRemovedNode</em> by doing </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>beforeRemoveNode.next = beforeRemoveNode.next.next;
</pre></div>
</div>
</div>

<p>Below is the whole code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode removeNthFromEnd(ListNode head, <span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="comment">/* beforeRemovedNode point to the head first</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="comment">         * pointNode point to the node n positions after beforeRemovedNode</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="comment">         */</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        ListNode pointNode = head;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        ListNode beforeRemoveNode = head;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="type">int</span> index = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="keyword">while</span> (index &lt;= n) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="keyword">if</span> (pointNode.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                <span class="keyword">return</span> head.next;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            pointNode = pointNode.next;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            index++;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        <span class="keyword">while</span>(pointNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            beforeRemoveNode = beforeRemoveNode.next;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            pointNode = pointNode.next;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        beforeRemoveNode.next = beforeRemoveNode.next.next;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        <span class="keyword">return</span> head;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rotate List]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/11/rotate-list/"/>
    <updated>2014-07-11T17:05:14-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/11/rotate-list</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/rotate-list/">Question</a></p>

<hr />
<p>For this question, note when n is larger than the length of the list, we need do the mod operation to get the remainder. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> ListNode rotateRight(ListNode head, <span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="type">int</span> len = getLength(head);
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span> || n == <span class="integer">0</span> || n % len == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="type">int</span> rotateIndex = len - n % len;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="type">int</span> index = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="comment">/* Find where to start rotate */</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        ListNode pointNode = head;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">while</span> (index &lt; rotateIndex) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            pointNode = pointNode.next;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            index++;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        ListNode startRotateNode = pointNode.next;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        pointNode.next = <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        <span class="comment">/* rotate, point the node before startRotateNode to null</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="comment">           point the last node in the rotated list to the head</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="comment">           return startRotateNode</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="comment">        */</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        ListNode rotateNode = startRotateNode;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        <span class="keyword">while</span>(rotateNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            rotateNode = rotateNode.next;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        rotateNode.next = head;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        <span class="keyword">return</span> startRotateNode;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    }
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    <span class="directive">public</span> <span class="type">int</span> getLength(ListNode head) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>        <span class="type">int</span> k = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>        <span class="keyword">while</span> (head != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>            head = head.next;
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            k++;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        }
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>        <span class="keyword">return</span> k;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Duplicates From Sorted List]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/10/remove-duplicates-from-sorted-list/"/>
    <updated>2014-07-10T23:25:13-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/10/remove-duplicates-from-sorted-list</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/remove-duplicates-from-sorted-list/">Question1</a></p>

<p><a href="https://oj.leetcode.com/problems/remove-duplicates-from-sorted-list-ii/">Question2</a></p>

<hr />
<p>Question 1 is very easy, I’ll just post my solution:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode deleteDuplicates(ListNode head) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode pointNode = head;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ListNode nextNode;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">while</span> ((nextNode = pointNode.next) != <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            <span class="keyword">if</span> (pointNode.val == nextNode.val) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                pointNode.next = nextNode.next;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                pointNode = pointNode.next;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        <span class="keyword">return</span> head;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }
</pre></div>
</div>
</div>

<p>For question 2, we need deal with more possible cases. We can use a <em>pivot node</em> to track. The basic idea is, if the first node is element, <em>pivot node</em> would be null and recursively call the first node after the duplicate nodesl; Otherwise, set the head node as the pivot node and begin to traverse. If we meet duplicates node, we skip them and point to <em>pivot node</em> to the next node which is not duplicate, update the pivot node to that node as well. We keep doing it until we meet the end of the list. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode deleteDuplicates(ListNode head) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span> || head.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode pointNode;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ListNode pivotNode;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="comment">/* if head node is duplicated, recursively call at the first node</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="comment">         * which is different with the head node</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="comment">         */</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">if</span> (head.val == head.next.val) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            pointNode = head;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="keyword">while</span> (pointNode.next != <span class="predefined-constant">null</span> &amp;&amp; pointNode.val == pointNode.next.val) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                pointNode = pointNode.next;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="keyword">return</span> deleteDuplicates(pointNode.next);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            <span class="comment">/* if head node is not duplicated, set it as pivot node</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="comment">             * if it's next node is not duplicated, set it's next node as new pivot node</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="comment">             * otherwise point pivotNode to the first node not duplicated, and set it as new pivot node</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="comment">             */</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            pivotNode = head;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            pointNode = head.next;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            <span class="keyword">while</span> (pointNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                <span class="keyword">if</span> (pointNode.val == pointNode.next.val) {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                    <span class="keyword">while</span> (pointNode.next != <span class="predefined-constant">null</span> &amp;&amp; pointNode.val == pointNode.next.val) {
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>                        pointNode = pointNode.next;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>                    }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                    <span class="keyword">if</span> (pointNode.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                        pivotNode.next = <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                        pointNode = pointNode.next;
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                        pivotNode.next = pointNode;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                    }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>                } <span class="keyword">else</span> {
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>                    pivotNode = pointNode;
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>                    pointNode = pointNode.next;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                }
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>            }
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Partition List]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/10/partition-list/"/>
    <updated>2014-07-10T21:46:09-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/10/partition-list</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/partition-list/">Question</a></p>

<hr />
<p>First, we need to find the first node whose <em>next</em> node’s value is not smaller than 3, which means the nodes before (and it self)this say,  <em>pivot node</em>, do not need to change. Next we traverse to see which node is smaller than <em>x</em>, put it after <em>pivot node</em>. Also note the special case where the head node’s value is larger than <em>x</em>, then the <em>pivot node</em> would be assigned later. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> ListNode partition(ListNode head, <span class="type">int</span> x) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode pointNode = head;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ListNode pivotNode;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="comment">/* Find the pivot node */</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="keyword">if</span> (head.val &lt; x) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="keyword">while</span> (pointNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                <span class="keyword">if</span> (pointNode.next.val &lt; x) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                    pointNode = pointNode.next;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                    <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            pivotNode = pointNode;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        } <span class="keyword">else</span> { <span class="comment">// if the head node's value is larger than x, then pivotNode is null</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            pivotNode = <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        <span class="comment">/* Traverse */</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        <span class="keyword">while</span> (pointNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            <span class="keyword">if</span> (pointNode.next.val &lt; x) {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                ListNode temp = pointNode.next;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>                pointNode.next = pointNode.next.next;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>                <span class="keyword">if</span> (pivotNode != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                    temp.next = pivotNode.next;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                    pivotNode.next = temp;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                    pivotNode = temp;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                    pivotNode = temp;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                    temp.next = head;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>                    head = temp;
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>                }
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                pointNode = pointNode.next;
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>            }
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        }
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        <span class="keyword">return</span> head;
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse Linked List II]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/10/reverse-linked-list-ii/"/>
    <updated>2014-07-10T15:48:08-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/10/reverse-linked-list-ii</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/reverse-linked-list-ii/">Question</a></p>

<hr />
<p>We need to take care of a situation when <em>m</em> equals to one, since it affects what we return. If <em>m=1</em>, then we return the last element in the list part that need reversed, otherwise we return the original head. </p>

<p>For the reverse operation, it’s helpful to know how to just simply reverse a linkedlist. Note we not only need to point node to its previous node, but also record the real next node. Therefore we need three pointers: <em>prev, curr, next</em>. Here is the code </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode reverseLinkedList(ListNode head) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span> || head.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode prev = head;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ListNode curr = head;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        ListNode next = head.next;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        head.next = <span class="predefined-constant">null</span>;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="keyword">while</span> (next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            curr = next;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            next = next.next;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            curr.next = prev;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            prev = curr;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        <span class="keyword">return</span> curr;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
</pre></div>
</div>
</div>

<p>With the help of this basic operation we can move to solve our original question. Here is the code </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode reverseBetween(ListNode head, <span class="type">int</span> m, <span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="type">int</span> index = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        ListNode pointNode;<span class="comment">// node used to traverse the list</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        ListNode listPrev; <span class="comment">// record the node before the reversed list part</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode listHead; <span class="comment">// record the head of the reversed list part</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        pointNode = head;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="keyword">while</span> (index + <span class="integer">1</span> &lt; m) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            pointNode = pointNode.next;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            index++;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        listPrev = pointNode;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        listHead = m == <span class="integer">1</span>? head : pointNode.next;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        ListNode prev = pointNode;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        ListNode curr = pointNode;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        ListNode next = pointNode.next;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        <span class="keyword">while</span> (index &lt; n) {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            curr = next;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>            next = next.next;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            curr.next = prev;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            prev = curr;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            index++;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        listHead.next = next;
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        <span class="keyword">if</span> (m == <span class="integer">1</span>) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>            <span class="keyword">return</span> curr;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>            listPrev.next = curr;
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>            <span class="keyword">return</span> head;    
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>        }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Two Numbers]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/02/add-two-numbers/"/>
    <updated>2014-07-02T17:39:28-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/02/add-two-numbers</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/add-two-numbers/">Question</a></p>

<hr />
<p>For this question, we need to take care of the carry from the previous calculation. Here I use a helper function <em>addHelper</em> to help maintain the information of the carry. Here follows the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode addTwoNumbers(ListNode l1, ListNode l2) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="keyword">return</span> addHelper(l1, l2, <span class="integer">0</span>);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="comment">/* @param carry:if there is a carry from previous caculation */</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="directive">private</span> ListNode addHelper(ListNode l1, ListNode l2, <span class="type">int</span> carry) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="keyword">if</span> (l1 == <span class="predefined-constant">null</span> &amp;&amp; l2 == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="keyword">return</span> carry == <span class="integer">1</span> ? <span class="keyword">new</span> ListNode(<span class="integer">1</span>) : <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        } <span class="keyword">else</span> <span class="keyword">if</span> (l1 == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            <span class="keyword">return</span> carry == <span class="integer">1</span> ? addHelper(l2, <span class="keyword">new</span> ListNode(<span class="integer">1</span>), <span class="integer">0</span>) : l2;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        } <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            <span class="keyword">return</span> carry == <span class="integer">1</span> ? addHelper(l1, <span class="keyword">new</span> ListNode(<span class="integer">1</span>), <span class="integer">0</span>) : l1;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="type">int</span> val1 = l1.val;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            <span class="type">int</span> val2 = l2.val;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            <span class="type">int</span> sum = carry + val1 + val2;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            ListNode lstNode = <span class="keyword">new</span> ListNode(sum % <span class="integer">10</span>);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            lstNode.next = (sum &gt;= <span class="integer">10</span>) ? (addHelper(l1.next, l2.next, <span class="integer">1</span>))
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                    : (addHelper(l1.next, l2.next, <span class="integer">0</span>));
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>            <span class="keyword">return</span> lstNode;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gas Station]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/02/gas-station/"/>
    <updated>2014-07-02T17:10:12-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/02/gas-station</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/gas-station/">Question</a></p>

<hr />
<p>For this question, not we are using a array to represent an circular route, thus we need take care of the boundary conditions: when the station is at the index of <em>gas.length - 1</em>, the next station would be at index <em>0</em> rather than <em>gas.length</em>. For every station, we check if the requirement is met, if we come back to the very first index, we successfully travel around the circuit. Below is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">int</span> canCompleteCircuit(<span class="type">int</span><span class="type">[]</span> gas, <span class="type">int</span><span class="type">[]</span> cost) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; gas.length; i++) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">if</span> (ifComplete(i, gas, cost))
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>                <span class="keyword">return</span> i;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="keyword">return</span> -<span class="integer">1</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="directive">public</span> <span class="type">boolean</span> ifComplete(<span class="type">int</span> index, <span class="type">int</span><span class="type">[]</span> gas, <span class="type">int</span><span class="type">[]</span> cost) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="type">int</span> gasNum = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="type">int</span> startingStation = index;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span class="keyword">while</span> ((gasNum = gasNum + gas[index] - cost[index]) &gt;= <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            index = index == gas.length - <span class="integer">1</span> ? <span class="integer">0</span> : ++index;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="keyword">if</span> (index == startingStation) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                <span class="keyword">return</span> <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set Matrix Zeroes]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/02/set-matrix-zeroes/"/>
    <updated>2014-07-02T16:02:01-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/02/set-matrix-zeroes</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/set-matrix-zeroes/">Question</a></p>

<hr />
<p>I firstly figure out O(m + n) solution, that is to create two HashSets, one containing the rows where exist 0 element, the other columns. Then traverse through those two sets, and set the corresponding rows and columns to 0. The code follows below:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">void</span> setZeroes(<span class="type">int</span><span class="type">[]</span><span class="type">[]</span> matrix) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="predefined-type">Set</span>&lt;<span class="predefined-type">Integer</span>&gt; zeroRow = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="predefined-type">Set</span>&lt;<span class="predefined-type">Integer</span>&gt; zeroColumn = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; matrix.length; i++) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="integer">0</span>; j &lt; matrix[<span class="integer">0</span>].length; j++) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                <span class="keyword">if</span> (matrix[i][j] == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>                    zeroRow.add(i);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                    zeroColumn.add(j);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span class="keyword">for</span> (<span class="predefined-type">Integer</span> row : zeroRow) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            setRowZero(matrix, row);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        <span class="keyword">for</span> (<span class="predefined-type">Integer</span> column : zeroColumn) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            setColumnZero(matrix, column);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        }
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span class="directive">private</span> <span class="type">void</span> setRowZero(<span class="type">int</span><span class="type">[]</span><span class="type">[]</span> matrix, <span class="type">int</span> row) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; matrix[<span class="integer">0</span>].length; i++) {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>            matrix[row][i] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span class="directive">private</span> <span class="type">void</span> setColumnZero(<span class="type">int</span><span class="type">[]</span><span class="type">[]</span> matrix, <span class="type">int</span> column) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; matrix.length; i++) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>            matrix[i][column] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>        }
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    }
</pre></div>
</div>
</div>

<p>However, as mentioned in the question, this is not the best solution. It’s able to devise a constant space solution. We can take the first row and first column in the matrix to flag. For example, if <em>matrix[i][j]</em> is 0, then we set the corresponding <em>matrix[i][0]</em> and <em>matrix[0][j]</em> as 0. Note we need to take care of these things: 1. As the first row and first column would be overwritten, we need firstly determine if there is 0 on the them before we go to flag. 2. After finishing the flag job, we are going to set zeroes, here we not only need set the rows and columns whose corresponding flag rows and columns have zeroes, but also keep the flag row and column not overwritten by 0, thus we need firstly set zeroes except for first row and column, then according to 1, at last we deal with the first row and column. The code follows below:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">void</span> setZeroes2(<span class="type">int</span><span class="type">[]</span><span class="type">[]</span> matrix) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="type">boolean</span> firstRowZero = <span class="predefined-constant">false</span>;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">boolean</span> firstColumnZero = <span class="predefined-constant">false</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="comment">/* determine if there is zero in first row and first column */</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="keyword">if</span> (matrix[<span class="integer">0</span>][<span class="integer">0</span>] == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            firstRowZero = <span class="predefined-constant">true</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            firstColumnZero = <span class="predefined-constant">true</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; matrix.length; i++) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                <span class="keyword">if</span> (matrix[i][<span class="integer">0</span>] == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                    firstColumnZero = <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; matrix[<span class="integer">0</span>].length; i++) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                <span class="keyword">if</span> (matrix[<span class="integer">0</span>][i] == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                    firstRowZero = <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        }
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        <span class="comment">/* make first row and first column as the counting row and column */</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; matrix.length; i++) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="integer">1</span>; j &lt; matrix[<span class="integer">0</span>].length; j++) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>                <span class="keyword">if</span> (matrix[i][j] == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                    matrix[<span class="integer">0</span>][j] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                    matrix[i][<span class="integer">0</span>] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>                }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>            }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        }
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        <span class="comment">/* set zeroes except for first row and column */</span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; matrix.length; i++) {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>            <span class="keyword">if</span> (matrix[i][<span class="integer">0</span>] == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                setRowZero(matrix, i);
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>            }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>        }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; matrix[<span class="integer">0</span>].length; i++) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>            <span class="keyword">if</span> (matrix[<span class="integer">0</span>][i] == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                setColumnZero(matrix, i);
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>            }
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        }
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        <span class="comment">/* set zeroes for first row and column */</span>
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>        <span class="keyword">if</span> (firstColumnZero) {
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>            setColumnZero(matrix, <span class="integer">0</span>);
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>        }
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>        <span class="keyword">if</span> (firstRowZero) {
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>            setRowZero(matrix, <span class="integer">0</span>);
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>        }
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gray Code]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/02/gray-code/"/>
    <updated>2014-07-02T15:07:43-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/02/gray-code</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/gray-code/">Question</a></p>

<hr />

<p>After seeing this question, my first thought is to try flipping each bit and compare it to the elements in the <em>returnarr</em> to see if the flipped elements exists there. If not, I’ll continue flipping the next bit. The code follows below:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">List</span>&lt;<span class="predefined-type">Integer</span>&gt; grayCode(<span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="predefined-type">List</span>&lt;<span class="predefined-type">Integer</span>&gt; codeList = <span class="keyword">new</span> <span class="predefined-type">ArrayList</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">int</span> base = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="comment">/* begin with 0 */</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        codeList.add(base);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">while</span> (codeList.size() &lt; <span class="predefined-type">Math</span>.pow(<span class="integer">2</span>, n)) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; n; i++) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                <span class="type">int</span> newBase;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                <span class="keyword">if</span> ((base &gt;&gt; i) % <span class="integer">2</span> == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                    newBase = base + (<span class="integer">1</span> &lt;&lt; i);
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                    newBase = base - (<span class="integer">1</span> &lt;&lt; i);
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                <span class="keyword">if</span> (!codeList.contains(newBase)) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                    codeList.add(newBase);
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                    base = newBase;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                    <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        <span class="keyword">return</span> codeList;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    }
</pre></div>
</div>
</div>

<p>However, this method will take at least O(n*2^n) time complexity. Thanks to <a href="http://n00tc0d3r.blogspot.com/2013/03/gray-code-and-variants.html">this website</a>, giving a O(2^n) time complexity algorithm, efficient and genius as well. The method is basically from this:
To calculate gray code sequence of 1 bit, only need to flip the last bit from 0 to 1.</p>

<pre><code>0
1
</code></pre>

<p>Move to 2 bits, as shown above, first generate a gray code sequence of 1 bit, then go backwards and flip the second bit from 0 to 1.</p>

<pre><code>00
01 ↑
---
11 ↓
10
</code></pre>

<p>Move to 3 bits, first generate a gray code sequence of 2 bits, then go backwards and flip the third bit from 0 to 1.</p>

<pre><code>000
001
011
010 ↑
-----
110 ↓
111
101
100
</code></pre>

<p>we can generate n bits gray code by generating n - 1 bits gray code firstly, and flip the highest bit from 0 to 1. Thus we can go all way down to 1 bit and start from there. The code follows below:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">List</span>&lt;<span class="predefined-type">Integer</span>&gt; grayCode2(<span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="predefined-type">List</span>&lt;<span class="predefined-type">Integer</span>&gt; codeList = <span class="keyword">new</span> <span class="predefined-type">ArrayList</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="comment">/* begin with 0 */</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        codeList.add(<span class="integer">0</span>);
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; n; ++i) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            <span class="keyword">for</span> (<span class="type">int</span> j = codeList.size() - <span class="integer">1</span>; j &gt;= <span class="integer">0</span>; j--) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>                codeList.add(codeList.get(j) | <span class="integer">1</span> &lt;&lt; i);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="keyword">return</span> codeList;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Climbing Stairs]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/01/climbing-stairs/"/>
    <updated>2014-07-01T23:11:20-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/01/climbing-stairs</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/climbing-stairs/">Question</a></p>

<hr />
<p>We can solve this question by taking advantage of <a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci number</a>. To get the distinct ways to climb n steps, we can separate it into two parts, first taking one step, then the ways is the same with <em>climeStair(n - 1)</em>; Second taking two steps, then the the ways is the same with <em>climeStair(n - 2)</em>. In total, <em>climeStair(n)</em> = <em>climeStair(n - 1)</em> + <em>climeStair(n - 2)</em>, which is actually to find the _n_th Fibonacci number. The code follows here:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">int</span> climbStairs(<span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (n &lt;= <span class="integer">2</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> n;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="type">int</span><span class="type">[]</span> steps = <span class="keyword">new</span> <span class="type">int</span>[n + <span class="integer">1</span>];
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        steps[<span class="integer">1</span>] = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        steps[<span class="integer">2</span>] = <span class="integer">2</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="integer">3</span>; i &lt;= n; i++) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            steps[i] = steps[i - <span class="integer">1</span>] + steps[i - <span class="integer">2</span>];
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="keyword">return</span> steps[n];
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plus One]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/01/plus-one/"/>
    <updated>2014-07-01T16:30:34-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/01/plus-one</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/plus-one/">Question</a></p>

<hr />
<p>For this question, I take advantage of a helper function <em>plusOneHelper</em>, which will add one to the <em>end</em> element of array <em>digit</em>, if the result is smaller than 10, we can return. If not, we set the digit on that index 0 and recursively call this helper function on the array from start to <em>end</em>-1. After running this helper function, we determine if the first element of the array is 0, if not we return the original array. Otherwise, we create a new array <em>newDigit</em>, starting with 1, and copy the rest from <em>digits</em>. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">int</span><span class="type">[]</span> plusOne(<span class="type">int</span><span class="type">[]</span> digits) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        plusOneHelper(digits, <span class="integer">0</span>, digits.length - <span class="integer">1</span>);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="keyword">if</span> (digits[<span class="integer">0</span>] == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>            <span class="type">int</span><span class="type">[]</span> newDigit = <span class="keyword">new</span> <span class="type">int</span>[digits.length + <span class="integer">1</span>];
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            newDigit[<span class="integer">0</span>] = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digits.length; i++) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>                newDigit[i + <span class="integer">1</span>] = digits[i];
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="keyword">return</span> newDigit;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        <span class="keyword">return</span> digits;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="directive">private</span> <span class="type">void</span> plusOneHelper(<span class="type">int</span><span class="type">[]</span> digits, <span class="type">int</span> start, <span class="type">int</span> end) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        <span class="keyword">if</span> (end &lt; start) {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        <span class="type">int</span> base = digits[end];
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        base += <span class="integer">1</span>;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        <span class="keyword">if</span> (base &lt; <span class="integer">10</span>) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            digits[end] = base;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>            digits[end] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>            plusOneHelper(digits, start, end - <span class="integer">1</span>);
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rotate Image]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/01/rotate-image/"/>
    <updated>2014-07-01T15:41:04-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/01/rotate-image</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/rotate-image/">Question</a></p>

<hr />
<p>We regard the matrix as made by different levels of circles (square though). For every circle, we do a rotation for every element in the circle. The code follows here:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">void</span> rotate(<span class="type">int</span><span class="type">[]</span><span class="type">[]</span> matrix) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="type">int</span> n = matrix.length;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; n / <span class="integer">2</span>; i++) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n - i - <span class="integer">1</span>; j++) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>                rotateElement(matrix, i, j);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            }
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="directive">private</span> <span class="type">void</span> rotateElement(<span class="type">int</span><span class="type">[]</span><span class="type">[]</span> matrix, <span class="type">int</span> i, <span class="type">int</span> j) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span class="type">int</span> n = matrix.length;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        <span class="type">int</span> temp = matrix[i][j];
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        matrix[i][j] = matrix[n - <span class="integer">1</span> - j][i];
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        matrix[n - <span class="integer">1</span> - j][i] = matrix[n - <span class="integer">1</span> - i][n - <span class="integer">1</span> - j];
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        matrix[n - <span class="integer">1</span> - i][n - <span class="integer">1</span> - j] = matrix[j][n - <span class="integer">1</span> - i];
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        matrix[j][n - <span class="integer">1</span> - i] = temp;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trapping Rain Water]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/30/trapping-rain-water/"/>
    <updated>2014-06-30T17:06:16-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/30/trapping-rain-water</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/trapping-rain-water/">Question</a></p>

<hr />
<p>For every slot, we find both the highest elevation of its left slots and right slots, the <strong>smaller</strong> of which will be the local maximum height. Next we need to compare this height, say <em>maxh</em> with the height of the slot, say <em>h</em>, if <em>h</em> is larger, meaning it’s not able to trap water as it itself is the highest. If not, we can trap <em>mh</em> - <em>h</em> amount of water. Here follows the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">int</span> trap(<span class="type">int</span><span class="type">[]</span> A) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (A.length == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="comment">/* Initialize leftMax and rightMax */</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="type">int</span> leftMax = A[<span class="integer">0</span>];
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="type">int</span> rightMax = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; A.length; i++) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            <span class="keyword">if</span> (A[i] &gt; rightMax) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                rightMax = A[i];
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span class="comment">/* Get capacity of every slot */</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        <span class="type">int</span> capacity = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; A.length - <span class="integer">1</span>; i++) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            <span class="type">int</span> left = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            <span class="type">int</span> right = <span class="integer">0</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            <span class="keyword">if</span> (leftMax &gt; A[i]) {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                left = leftMax;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                leftMax = A[i];
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            <span class="keyword">if</span> (rightMax &gt; A[i]) {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                right = rightMax;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>                <span class="type">int</span> newRightMax = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>                <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="integer">1</span>; j &lt; A.length; j++) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                    <span class="keyword">if</span> (A[j] &gt; newRightMax) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                        newRightMax = A[j];
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                    }
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                }
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                rightMax = newRightMax;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>            }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            <span class="type">int</span> localMax = left &gt; right ? right : left;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>            capacity += localMax &gt; A[i] ? localMax - A[i] : <span class="integer">0</span>;
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>        }
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>        <span class="keyword">return</span> capacity;
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Valid Sudoku]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/30/valid-sudoku/"/>
    <updated>2014-06-30T15:45:57-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/30/valid-sudoku</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/valid-sudoku/">Question</a></p>

<hr />

<p>This is a simple question, as the <a href="http://sudoku.com.au/TheRules.aspx">rules</a> of a valid sudoku is already given. We just need to follow the rules to implement the function.</p>

<p>Here I convert int <em>i</em> to char by using (char)(‘0’ + i). The whole code snippet follows here:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">boolean</span> isValidSudoku(<span class="type">char</span><span class="type">[]</span><span class="type">[]</span> board) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="predefined-type">Set</span>&lt;<span class="predefined-type">Character</span>&gt; set1 = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="predefined-type">Set</span>&lt;<span class="predefined-type">Character</span>&gt; set2 = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; <span class="integer">9</span>; i++) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            setUp(set1);
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>            setUp(set2);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="integer">0</span>; j &lt; <span class="integer">9</span>; j++) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                <span class="type">char</span> num;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>                <span class="comment">// Each row must have the numbers 1-9 occuring just once.</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                <span class="keyword">if</span> ((num = board[i][j]) != <span class="string"><span class="delimiter">'</span><span class="content">.</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                    <span class="keyword">if</span> (set1.contains(num)) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                        set1.remove(num);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                        <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                    }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                <span class="comment">// Each column must have the numbers 1-9 occuring just once.</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                <span class="keyword">if</span> ((num = board[j][i]) != <span class="string"><span class="delimiter">'</span><span class="content">.</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                    <span class="keyword">if</span> (set2.contains(num)) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                        set2.remove(num);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                        <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                    }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        <span class="comment">// the numbers 1-9 must occur just once in each of the 9 sub-boxes of</span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        <span class="comment">// the grid.</span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; <span class="integer">3</span>; i++) {
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="integer">0</span>; j &lt; <span class="integer">3</span>; j++) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                <span class="type">int</span> m = i * <span class="integer">3</span>;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                <span class="type">int</span> n = j * <span class="integer">3</span>;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                setUp(set1);
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                <span class="keyword">for</span> (<span class="type">int</span> k = m; k &lt; m + <span class="integer">3</span>; k++) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                    <span class="keyword">for</span> (<span class="type">int</span> l = n; l &lt; n + <span class="integer">3</span>; l++) {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                        <span class="type">char</span> num;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>                        <span class="keyword">if</span> ((num = board[k][l]) == <span class="string"><span class="delimiter">'</span><span class="content">.</span><span class="delimiter">'</span></span>)
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>                            <span class="keyword">continue</span>;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>                        <span class="keyword">if</span> (set1.contains(num)) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>                            set1.remove(num);
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>                            <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>                        }
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>                    }
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>                }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>            }
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>        }
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>        <span class="keyword">return</span> <span class="predefined-constant">true</span>;
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>    }
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>    <span class="directive">public</span> <span class="type">void</span> setUp(<span class="predefined-type">Set</span>&lt;<span class="predefined-type">Character</span>&gt; set) {
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt;= <span class="integer">9</span>; i++) {
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>            set.add((<span class="type">char</span>) (<span class="string"><span class="delimiter">'</span><span class="content">0</span><span class="delimiter">'</span></span> + i));
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>        }
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Permutation Sequence]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/30/permutation-sequence/"/>
    <updated>2014-06-30T11:40:31-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/30/permutation-sequence</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/permutation-sequence/">Question</a></p>

<hr />

<p>We have already solved <a href="http://www.codertkk.com/blog/2014/06/29/next-permutation/">Next Permutation</a> question, with the help of this, we just need a loop to find the <em>k</em> th string. Here are the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="predefined-type">String</span> getPermutation(<span class="type">int</span> n, <span class="type">int</span> k) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="type">int</span><span class="type">[]</span> num = <span class="keyword">new</span> <span class="type">int</span>[n];
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; n; i++) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        num[i] = i + <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="integer">1</span>; i &lt; k; i++ ) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        nextPermutation(num);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="predefined-type">StringBuilder</span> sb = <span class="keyword">new</span> <span class="predefined-type">StringBuilder</span>();
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">for</span>(<span class="type">int</span> i : num) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        sb.append(i);
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span class="keyword">return</span> sb.toString();
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>}
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
</feed>

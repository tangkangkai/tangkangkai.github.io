<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-07-19T09:09:45-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Count and Say]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/19/count-and-say/"/>
    <updated>2014-07-19T09:04:58-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/19/count-and-say</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/count-and-say/">Question</a></p>

<hr />
<p>We use a <em>countAndSayHelper</em> function to generate “next” count and say sequence. Here we need traverse through the string, compare each character with its next one, if they are the same, we add the <em>count</em> and keep going. If not, we concatenate the <em>count</em> and the <em>character</em> together and append it to a stringbuilder. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> countAndSay(<span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="predefined-type">String</span> s = <span class="predefined-type">String</span>.valueOf(n);
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; n; i++) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>            s = countAndSayHelper(s);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="keyword">return</span> s;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    }
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="directive">public</span> <span class="predefined-type">String</span> countAndSayHelper(<span class="predefined-type">String</span> s) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="predefined-type">StringBuilder</span> sb = <span class="keyword">new</span> <span class="predefined-type">StringBuilder</span>();
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; s.length(); i++) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            <span class="type">char</span> c = s.charAt(i);
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="type">int</span> count = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            <span class="keyword">if</span> (i == s.length() - <span class="integer">1</span>) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">1</span><span class="delimiter">&quot;</span></span> + c);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                <span class="type">char</span> next_c;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                <span class="keyword">while</span> (i != s.length() - <span class="integer">1</span> &amp;&amp; (next_c = s.charAt(i + <span class="integer">1</span>)) == c) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                    count++;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                    i++;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                }        
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                sb.append(count);
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                sb.append(c);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        <span class="keyword">return</span> sb.toString();
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roman to Integer]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/19/roman-to-integer/"/>
    <updated>2014-07-19T01:01:14-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/19/roman-to-integer</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/roman-to-integer/">Question</a></p>

<hr />
<p>This question is the inverse version of <a href="http://www.codertkk.com/blog/2014/07/18/integer-to-roman/"><em>Integer to Roman</em></a>. We need to take care of different situations of <a href="http://en.wikipedia.org/wiki/Roman_numerals">Roman Numerals</a>, here is the code:</p>

<div class="language-java"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    public int romanToInt(String s) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        int returnValue = 0;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        for(int i = 0; i &lt; s.length(); i++) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            if (s.charAt(i) == 'M') {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>                returnValue += 1000;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            } else if (s.charAt(i) == 'D') {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                returnValue += 500;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            } else if (s.charAt(i) == 'C') {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                if (i == s.length() -1) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                    returnValue += 100;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                } else if (s.charAt(i + 1) == 'M') {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                    i++;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                    returnValue += 900;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                    
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                } else if (s.charAt(i + 1) == 'D') {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                    i++;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                    returnValue += 400;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                } else {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                    returnValue += 100;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                }
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            } else if (s.charAt(i) == 'L') {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                returnValue += 50;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>            } else if (s.charAt(i) == 'X') {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                if (i == s.length() -1) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>                    returnValue += 10;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                } else if (s.charAt(i + 1) == 'C') {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                    i++;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>                    returnValue += 90;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>                    
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>                } else if (s.charAt(i + 1) == 'L') {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                    i++;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                    returnValue += 40;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                } else {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                    returnValue += 10;
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                }
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>            } else if (s.charAt(i) == 'V') {
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>                returnValue += 5;
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            } else {
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>                if (i == s.length() -1) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>                    returnValue += 1;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                } else if (s.charAt(i + 1) == 'X') {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>                    i++;
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>                    returnValue += 9;
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>                    
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>                } else if (s.charAt(i + 1) == 'V') {
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>                    i++;
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>                    returnValue += 4;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>                } else {
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>                    returnValue += 1;
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>                }
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>            }
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>            
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>        }
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>        return returnValue;
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>    }
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integer to Roman]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/18/integer-to-roman/"/>
    <updated>2014-07-18T22:28:45-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/18/integer-to-roman</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/integer-to-roman/">Question</a></p>

<hr />
<p>For the number on <em>hundred, ten, one</em> bits, there are four situations, 9, 8-5, 4, 3-1. We can deal with this question using the code below,</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="predefined-type">StringBuilder</span> sb;
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> intToRoman(<span class="type">int</span> num) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">int</span> digit;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        sb = <span class="keyword">new</span> <span class="predefined-type">StringBuilder</span>();
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="comment">/* thousand */</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="keyword">if</span> (num &gt;= <span class="integer">1000</span>) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            digit = num / <span class="integer">1000</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">M</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            num -= digit * <span class="integer">1000</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span class="comment">/* handred */</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        <span class="keyword">if</span> (num &gt;= <span class="integer">100</span>) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="keyword">if</span> (num &gt;= <span class="integer">900</span>) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">CM</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                num -= <span class="integer">900</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">500</span>) {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">D</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                num -= <span class="integer">500</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                digit = num / <span class="integer">100</span>;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>                    sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">C</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                num -= digit * <span class="integer">100</span>;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">400</span>) {
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">CD</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>                num -= <span class="integer">400</span>;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                digit = num / <span class="integer">100</span>;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                    sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">C</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                }
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                num -= digit * <span class="integer">100</span>;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>            }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>        }
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>        <span class="comment">/* ten */</span>
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>        <span class="keyword">if</span> (num &gt;= <span class="integer">10</span>) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>            <span class="keyword">if</span> (num &gt;= <span class="integer">90</span>) {
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">XC</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>                num -= <span class="integer">90</span>;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">50</span>) {
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">L</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>                num -= <span class="integer">50</span>;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>                
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>                digit = num / <span class="integer">10</span>;
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>                    sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">X</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>                }
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>                num -= digit * <span class="integer">10</span>;
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>             } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">40</span>) {
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>                 sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">XL</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>                 num -= <span class="integer">40</span>;
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>             } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>                digit = num / <span class="integer">10</span>;
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>                    sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">X</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>                }
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>                num -= digit * <span class="integer">10</span>;
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>             }
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>        }
<span class="line-numbers"><a href="#n66" name="n66">66</a></span>        
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>        <span class="comment">/* one */</span>
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>        <span class="keyword">if</span> (num &gt;= <span class="integer">1</span>) {
<span class="line-numbers"><a href="#n69" name="n69">69</a></span>            <span class="keyword">if</span> (num &gt;= <span class="integer">9</span>) {
<span class="line-numbers"><strong><a href="#n70" name="n70">70</a></strong></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">IX</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n71" name="n71">71</a></span>                num -= <span class="integer">9</span>;
<span class="line-numbers"><a href="#n72" name="n72">72</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">5</span>) {
<span class="line-numbers"><a href="#n73" name="n73">73</a></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">V</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n74" name="n74">74</a></span>                num -= <span class="integer">5</span>;
<span class="line-numbers"><a href="#n75" name="n75">75</a></span>                
<span class="line-numbers"><a href="#n76" name="n76">76</a></span>                digit = num / <span class="integer">1</span>;
<span class="line-numbers"><a href="#n77" name="n77">77</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n78" name="n78">78</a></span>                    sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">I</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n79" name="n79">79</a></span>                }
<span class="line-numbers"><strong><a href="#n80" name="n80">80</a></strong></span>                num -= digit * <span class="integer">1</span>;
<span class="line-numbers"><a href="#n81" name="n81">81</a></span>             } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">4</span>) {
<span class="line-numbers"><a href="#n82" name="n82">82</a></span>                 sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">IX</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n83" name="n83">83</a></span>                 num -= <span class="integer">4</span>;
<span class="line-numbers"><a href="#n84" name="n84">84</a></span>             } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n85" name="n85">85</a></span>                digit = num / <span class="integer">1</span>;
<span class="line-numbers"><a href="#n86" name="n86">86</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n87" name="n87">87</a></span>                    sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">I</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n88" name="n88">88</a></span>                }
<span class="line-numbers"><a href="#n89" name="n89">89</a></span>                num -= digit * <span class="integer">1</span>;
<span class="line-numbers"><strong><a href="#n90" name="n90">90</a></strong></span>             }
<span class="line-numbers"><a href="#n91" name="n91">91</a></span>        }
<span class="line-numbers"><a href="#n92" name="n92">92</a></span>
<span class="line-numbers"><a href="#n93" name="n93">93</a></span>        <span class="keyword">return</span> sb.toString();
<span class="line-numbers"><a href="#n94" name="n94">94</a></span>
<span class="line-numbers"><a href="#n95" name="n95">95</a></span>    }
</pre></div>
</div>
</div>

<p>However, this solution is redundant, as for each digit on hundred, ten, one would meet similar situations, we can extract a helper function to deal with them. Here is the modified function:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="predefined-type">StringBuilder</span> sb;
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="type">int</span> num;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> intToRoman(<span class="type">int</span> num) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="type">int</span> digit;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="local-variable">this</span>.num = num;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        sb = <span class="keyword">new</span> <span class="predefined-type">StringBuilder</span>();
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="comment">/* thousand */</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="keyword">if</span> (num &gt;= <span class="integer">1000</span>) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            digit = num / <span class="integer">1000</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">M</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="local-variable">this</span>.num -= digit * <span class="integer">1000</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        <span class="comment">/* handred */</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        buildHelper(<span class="local-variable">this</span>.num, <span class="integer">100</span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">M</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">D</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">C</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        <span class="comment">/* ten */</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        buildHelper(<span class="local-variable">this</span>.num, <span class="integer">10</span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">C</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">L</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">X</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        <span class="comment">/* one */</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        buildHelper(<span class="local-variable">this</span>.num, <span class="integer">1</span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">X</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">V</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">I</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        <span class="keyword">return</span> sb.toString();
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span class="directive">public</span> <span class="type">void</span> buildHelper(<span class="type">int</span> num, <span class="type">int</span> base, <span class="predefined-type">String</span> tenS, <span class="predefined-type">String</span> fiveS, <span class="predefined-type">String</span> oneS) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        <span class="type">int</span> digit;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        <span class="keyword">if</span> (num &gt;= base) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>            <span class="keyword">if</span> (num &gt;= <span class="integer">9</span> * base) {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                sb.append(oneS + tenS);
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                num -= <span class="integer">9</span> * base;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">5</span> * base) {
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>                sb.append(fiveS);
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>                num -= <span class="integer">5</span> * base;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>                
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>                digit = num / base;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>                    sb.append(oneS);
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>                }
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>                num -= digit * base;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">4</span> * base) {
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>                sb.append(oneS + fiveS);
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>                num -= <span class="integer">4</span> * base;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>                digit = num / base;
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>                    sb.append(oneS);
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>                }
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>                num -= digit * base;
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>            }
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>        }
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>        <span class="local-variable">this</span>.num = num;
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Valid Number]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/18/valid-number/"/>
    <updated>2014-07-18T21:22:34-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/18/valid-number</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/valid-number/">Question</a></p>

<hr />
<p>This question isn’t tricky but many requirements need be meet. For these requirements, I　comment them in the code following below:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">boolean</span> isNumber(<span class="predefined-type">String</span> s) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="comment">/* trim the leading and trailing space, if there's space in the middle, return false */</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        s = s.trim();
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="keyword">if</span> (s == <span class="predefined-constant">null</span> || s.isEmpty()) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        }
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="comment">/* s could cantain ONE '.' and ONE 'e' */</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="type">boolean</span> dotFlag = <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="type">boolean</span> eFlag = <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="comment">/* For '.', there must either be number before it or after it</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="comment">         * For 'e', there must be number before and after it */</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; s.length(); i++) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="type">char</span> c = s.charAt(i);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            <span class="keyword">if</span> (<span class="predefined-type">Character</span>.isDigit(c)) 
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                <span class="keyword">continue</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content">.</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                <span class="comment">/* if '.' is after 'e', return false */</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                <span class="keyword">if</span> (!eFlag || !dotFlag || !(isNumber(s.substring(<span class="integer">0</span>, i)) || isNumber(s.substring(i + <span class="integer">1</span>)))) 
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                    <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>                <span class="keyword">if</span> (!eFlag) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                    
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>                dotFlag = <span class="predefined-constant">false</span>;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content">e</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>                <span class="keyword">if</span> (!eFlag|| !isNumber(s.substring(<span class="integer">0</span>, i)) || !isNumber(s.substring(i + <span class="integer">1</span>))) 
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                    <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                eFlag = <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content">-</span><span class="delimiter">'</span></span> || c == <span class="string"><span class="delimiter">'</span><span class="content">+</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                <span class="comment">/* '-' and '+' must be at the first character, and followed by valid number */</span>
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                <span class="keyword">if</span> (!isNumber(s.substring(i + <span class="integer">1</span>))) {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                    <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>                }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>                
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>                <span class="keyword">if</span> (!(i == <span class="integer">0</span> || s.charAt(i - <span class="integer">1</span>) == <span class="string"><span class="delimiter">'</span><span class="content">e</span><span class="delimiter">'</span></span>)) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>                    <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                }
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>                <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>            }
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>        <span class="keyword">return</span> <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Common Prefix]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/17/longest-common-prefix/"/>
    <updated>2014-07-17T17:07:46-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/17/longest-common-prefix</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/longest-common-prefix/">Question</a></p>

<hr />
<p>We take the first string of the array as a <em>test string</em>, starting from its first character and comparing to each string in the array. We compare each character until the character doesn’t match in one of the compares or the length has exceeded the shortest string. We can return the substring of the <em>test string</em> as a result. Here is the result:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> longestCommonPrefix(<span class="predefined-type">String</span><span class="type">[]</span> strs) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (strs == <span class="predefined-constant">null</span>) <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="keyword">if</span> (strs.length == <span class="integer">0</span>) <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="predefined-type">String</span> testString = strs[<span class="integer">0</span>];
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="type">int</span> index = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">while</span>(index &lt; testString.length()) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            <span class="type">char</span> cAtIndex = testString.charAt(index);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; strs.length; i++) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                <span class="keyword">if</span> (index &gt;= strs[i].length() || strs[i].charAt(index) != cAtIndex) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                    <span class="keyword">return</span> testString.substring(<span class="integer">0</span>, index);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            index++;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        <span class="keyword">return</span> testString;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Palindromic Substring]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/16/longest-palindromic-substring/"/>
    <updated>2014-07-16T09:25:36-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/16/longest-palindromic-substring</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/longest-palindromic-substring/">Question</a></p>

<hr />
<p>We use two pointers pointing to the middle of the string, then move them to each side if the character they pointing to are the same. Note substring is continuous and we need take care of both odd and even length situations. The code follows below:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> longestPalindrome(<span class="predefined-type">String</span> s) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="predefined-type">String</span> longestPalindromeString = <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; s.length(); i++) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>            <span class="predefined-type">String</span> palindrome = findLongestPalindrome(s, i, i);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            <span class="keyword">if</span> (palindrome.length() &gt; longestPalindromeString.length()) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>                longestPalindromeString = palindrome;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            }
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; s.length(); i++) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="predefined-type">String</span> palindrome = findLongestPalindrome(s, i - <span class="integer">1</span>, i);
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="keyword">if</span> (palindrome.length() &gt; longestPalindromeString.length()) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                longestPalindromeString = palindrome;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        <span class="keyword">return</span> longestPalindromeString;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> findLongestPalindrome(<span class="predefined-type">String</span> s, <span class="type">int</span> i, <span class="type">int</span> j) {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        <span class="keyword">while</span> (i &gt;= <span class="integer">0</span> &amp;&amp; j &lt; s.length() &amp;&amp; s.charAt(i) == s.charAt(j)) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            i--;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            j++;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        <span class="keyword">return</span> s.substring(i + <span class="integer">1</span>, j);
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Day One Pattern : Singleton]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/15/one-day-one-pattern-singleton/"/>
    <updated>2014-07-15T09:00:14-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/15/one-day-one-pattern-singleton</id>
    <content type="html"><![CDATA[<ul>
  <li>Purpose:
    <ul>
      <li>Restrict the creations of objects. Only one instance(of the class) could be created.</li>
    </ul>
  </li>
  <li>Implementation Details:
    <ul>
      <li>Private Constructor</li>
      <li>Private static variable that is the only instance of the class.</li>
      <li>Public static method that returns the instance of the class</li>
    </ul>
  </li>
  <li>Example:</li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">SingletonClass</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>     
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="directive">private</span> <span class="directive">static</span> <span class="directive">final</span> SingletonClass instance;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>     
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="comment">/* private constructor to avoid client applications to use constructor */</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="directive">private</span> SingletonClass(){}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="comment">/* for thread safety purpose */</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="directive">private</span> <span class="directive">static</span> <span class="type">class</span> <span class="class">SingletonHelper</span>{
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="directive">private</span> <span class="directive">static</span> <span class="directive">final</span> SingletonClass INSTANCE = <span class="keyword">new</span> SingletonClass();
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> 
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="directive">public</span> <span class="directive">static</span> SingletonClass getInstance(){
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        <span class="comment">/* Lazy initialization */</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span class="keyword">return</span> SingletonHelper.INSTANCE;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>Further &amp; Deeper understanding : <a href="http://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-with-examples">Singleton Design Pattern</a></li>
  <li>Reference may be needed:
    <ul>
      <li><a href="http://www.programmerinterview.com/index.php/java-questions/inner-vs-nested-classes/">difference between an inner and nested class in Java</a></li>
      <li><a href="http://stackoverflow.com/questions/1353309/java-static-vs-non-static-inner-class">difference between static and non-static nested classes(inner class)</a>
        <ul>
          <li>A static nested class does not have a reference to a nesting instance, so a static nested class cannot invoke non-static methods or access non-static fields of an instance of the class within which it is nested.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 5]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/15/relearn-java-day-5/"/>
    <updated>2014-07-15T08:27:04-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/15/relearn-java-day-5</id>
    <content type="html"><![CDATA[<ul>
  <li>super:
    <ul>
      <li>represent the father class</li>
      <li>there is invisible super() at the <strong>first</strong> sentence in the construction function of child class </li>
    </ul>
  </li>
  <li>
    <p>override &amp; overload </p>
  </li>
  <li>initialization</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Binary]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/14/add-binary/"/>
    <updated>2014-07-14T19:44:41-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/14/add-binary</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/add-binary/">Question</a></p>

<hr />
<p>As the string could be very long, we could not use the functions given in the Integer class, we need add operation ourselves. Basically, the strategy is adding the common part, then dealt with the remaining part, note we need take care of the <em>carry</em> all the way through. For example, when adding “101” and “10”, we add “01” and “10” firstly, then add “1” as the remaining part. Here is the implementation code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> addBinary(<span class="predefined-type">String</span> a, <span class="predefined-type">String</span> b) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="type">int</span> carry = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="predefined-type">StringBuilder</span> sb = <span class="keyword">new</span> <span class="predefined-type">StringBuilder</span>();
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="type">int</span> alen = a.length();
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="type">int</span> blen = b.length();
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="type">boolean</span> flag = alen &gt;= blen;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="predefined-type">String</span> longStr = flag ? a : b;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="type">int</span> longlen = longStr.length();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="type">int</span> i;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="comment">/* Add the mutual part */</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; (flag ? blen : alen); i++) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="type">int</span> aChar = a.charAt(alen - <span class="integer">1</span> - i) - <span class="integer">48</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            <span class="type">int</span> bChar = b.charAt(blen - <span class="integer">1</span> - i) - <span class="integer">48</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            <span class="type">int</span> resultChar;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            <span class="keyword">if</span> ((resultChar = aChar + bChar + carry) &gt;= <span class="integer">2</span>) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                resultChar -= <span class="integer">2</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                carry = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                carry = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            sb.insert(<span class="integer">0</span>, resultChar);
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        <span class="comment">/* Add the remaining part */</span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        <span class="keyword">for</span> (; i &lt; longlen; i++) {
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>            <span class="type">int</span> resultChar;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>            <span class="keyword">if</span> ((resultChar = longStr.charAt(longlen - <span class="integer">1</span> - i) - <span class="integer">48</span> + carry) &gt;= <span class="integer">2</span>) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                resultChar -= <span class="integer">2</span>;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                carry = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                carry = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>            }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>            sb.insert(<span class="integer">0</span>, resultChar);
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>        }
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>        <span class="comment">/* Add carry if there it's the hightes */</span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        <span class="keyword">if</span> (carry == <span class="integer">1</span>) {
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>            sb.insert(<span class="integer">0</span>, <span class="integer">1</span>);
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>        <span class="keyword">return</span> sb.toString();
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String to Integer (Atoi)]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/14/string-to-integer-atoi/"/>
    <updated>2014-07-14T17:38:56-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/14/string-to-integer-atoi</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/string-to-integer-atoi/">Question</a></p>

<hr />
<p>This question is complicated at the requirement need by <em>atoi()</em> function. At least these requirements need be met:</p>

<pre><code>* The leading invalid character(not number, + or -) could only be space
* After getting the first valid character, if there appears a invalid character, the string stops there. e.g. "123a2" will return 123.
* If string value out range of integer, return INT_MAX (2147483647) or INT_MIN (-2147483648) 
</code></pre>

<p>In my implementation, I use <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">StringBuilder</a> to store the valid string. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">int</span> atoi(<span class="predefined-type">String</span> str) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="predefined-type">StringBuilder</span> sb = <span class="keyword">new</span> <span class="predefined-type">StringBuilder</span>();
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">int</span> index = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="type">int</span> signFlag = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="type">char</span> c;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="comment">/* Truncate the leading invalid characters, get the sign of the integer */</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">while</span> (index &lt; str.length()) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            c = str.charAt(index);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            <span class="keyword">if</span> ((c &gt;= <span class="string"><span class="delimiter">'</span><span class="content">0</span><span class="delimiter">'</span></span> &amp;&amp; c &lt;= <span class="string"><span class="delimiter">'</span><span class="content">9</span><span class="delimiter">'</span></span>) || c == <span class="string"><span class="delimiter">'</span><span class="content">+</span><span class="delimiter">'</span></span> || c == <span class="string"><span class="delimiter">'</span><span class="content">-</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content">-</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                    signFlag = -<span class="integer">1</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                    index++;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                } 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content">+</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                    index++;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span>){
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                index++;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                <span class="comment">/* the invalid leading character could only be space */</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        <span class="comment">/* Get the valid string */</span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        <span class="keyword">while</span> (index &lt; str.length()) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>            c = str.charAt(index);
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>            <span class="comment">/* invalid sign */</span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>            <span class="keyword">if</span> (c &gt;= <span class="string"><span class="delimiter">'</span><span class="content">0</span><span class="delimiter">'</span></span> &amp;&amp; c &lt;= <span class="string"><span class="delimiter">'</span><span class="content">9</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                sb.append(c);
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>            }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            index++;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        }
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>        <span class="comment">/* change string to integer */</span>
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>        <span class="type">int</span> base = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        <span class="type">int</span> returnValue = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>        <span class="type">int</span> newReturnValue = returnValue;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>        <span class="keyword">if</span> (signFlag == <span class="integer">1</span>) {
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = sb.length() - <span class="integer">1</span>; i &gt;= <span class="integer">0</span>; i--) {
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>                newReturnValue = (<span class="type">int</span>) (returnValue + ((<span class="type">int</span>) (sb.charAt(i)) - <span class="integer">48</span>) * <span class="predefined-type">Math</span>.pow(<span class="integer">10</span>, base++));
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>                <span class="keyword">if</span> (newReturnValue &lt; returnValue) {
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>                    <span class="comment">/* out of the range */</span>
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>                    <span class="keyword">return</span> <span class="predefined-type">Integer</span>.MAX_VALUE;
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>                }
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>                returnValue = newReturnValue;
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>            }
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = sb.length() - <span class="integer">1</span>; i &gt;= <span class="integer">0</span>; i--) {
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>                newReturnValue = (<span class="type">int</span>) (returnValue - ((<span class="type">int</span>) (sb.charAt(i)) - <span class="integer">48</span>) * <span class="predefined-type">Math</span>.pow(<span class="integer">10</span>, base++));
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>                <span class="keyword">if</span> (newReturnValue &gt; returnValue) {
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>                    <span class="comment">/* out of the range */</span>
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>                    <span class="keyword">return</span> <span class="predefined-type">Integer</span>.MIN_VALUE;
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>                }
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>                returnValue = newReturnValue;
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>            }
<span class="line-numbers"><a href="#n66" name="n66">66</a></span>        }
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>        <span class="keyword">return</span> returnValue;
<span class="line-numbers"><a href="#n69" name="n69">69</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implement strStr()]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/14/implement-strstr/"/>
    <updated>2014-07-14T16:33:13-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/14/implement-strstr</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/implement-strstr/">Question</a></p>

<hr />
<p>We get the length of needle, traverse through haystack to get substrings with length same with needle, compare them to see if they are equal, say the substring <em>ss</em>. If so we can return the substring of haystack starting from the first index of <em>ss</em>. If no one match, we return null. The code follows below:</p>

<p>Ref:<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#substring%28int%29">String.subString</a></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> strStr(<span class="predefined-type">String</span> haystack, <span class="predefined-type">String</span> needle) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (haystack.equals(needle)) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> haystack;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="type">int</span> len = needle.length();
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; haystack.length() - len; i++) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            <span class="keyword">if</span> (haystack.substring(i, i + len).equals(needle)) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                <span class="keyword">return</span> haystack.substring(i);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Valid Palindrome]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/14/valid-palindrome/"/>
    <updated>2014-07-14T16:11:19-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/14/valid-palindrome</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/valid-palindrome/">Question</a></p>

<hr />
<p>We compare the first and last alphanumeric character, if they are not equal return false directly otherwise keep comparing until there is only one or no character left in the string. Here is the code:</p>

<p>Ref: <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isLetterOrDigit%28char%29">Character.isLetterOrDigit</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#toLowerCase%28char%29">Character.toLowerCase</a></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">boolean</span> isPalindrome(<span class="predefined-type">String</span> s) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">int</span> firstIndex = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="type">char</span> firstChar;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="type">int</span> lastIndex = s.length() - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="type">char</span> lastChar;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="keyword">while</span> (firstIndex &lt; lastIndex) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="comment">/* only alphanumeric */</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="keyword">if</span> (!<span class="predefined-type">Character</span>.isLetterOrDigit((firstChar = s.charAt(firstIndex)))) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                firstIndex++;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="keyword">if</span> (!<span class="predefined-type">Character</span>.isLetterOrDigit((lastChar = s.charAt(lastIndex)))) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                lastIndex--;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                <span class="keyword">continue</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            <span class="comment">/* Ignore Case */</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            <span class="keyword">if</span> (<span class="predefined-type">Character</span>.toLowerCase(firstChar) != <span class="predefined-type">Character</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                    .toLowerCase(lastChar)) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>            firstIndex++;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>            lastIndex--;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        <span class="keyword">return</span> <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    }
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse Nodes in k-Group]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/13/reverse-nodes-in-k-groupreverse-nodes-in-k-group/"/>
    <updated>2014-07-13T22:35:55-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/13/reverse-nodes-in-k-groupreverse-nodes-in-k-group</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/reverse-nodes-in-k-group/">Question</a></p>

<hr />
<p>This question is similar to <a href="http://www.codertkk.com/blog/2014/07/13/swap-nodes-in-pairs/">Swap Nodes in Pairs</a>. The difference is we form a group of <em>k</em> nodes and reverse them rather than just easily swap two nodes. But the procedure is similar, here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode reverseKGroup(ListNode head, <span class="type">int</span> k) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span> || head.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode pointerNode = head;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="type">int</span> index = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="comment">/* Get a group of k nodes, if there is less than k nodes, return head */</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="keyword">while</span> (index &lt; k) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            pointerNode = pointerNode.next;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="keyword">if</span>(pointerNode == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                <span class="keyword">return</span> head;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            index++;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        <span class="comment">/* Get the next node we need recursively call the function on */</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        ListNode nextGroupNode = pointerNode.next;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        ListNode prev = head;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        ListNode curr = head;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        ListNode next = head.next;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        <span class="comment">/* Reverse the nodes in the group */</span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        <span class="keyword">while</span>(next != nextGroupNode) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            curr = next;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>            next = next.next;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>            curr.next = prev;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>            prev = curr;
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        }
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        <span class="comment">/* Recursively call the function on the head of the next group */</span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>        head.next = reverseKGroup(nextGroupNode, k);
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>        
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>        <span class="keyword">return</span> curr;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swap Nodes in Pairs]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/13/swap-nodes-in-pairs/"/>
    <updated>2014-07-13T22:05:48-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/13/swap-nodes-in-pairs</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/swap-nodes-in-pairs/">Question</a></p>

<hr />
<p>For this question, we can firstly swap the first and second node, then point the second node to the result of calling function(recursively) on the third node. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode swapPairs(ListNode head) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span> || head.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode headNode = head.next;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ListNode thirdNode = headNode.next;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        headNode.next = head;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        head.next = swapPairs(thirdNode);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">return</span> headNode;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Nth Node From End of List]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/13/remove-nth-node-from-end-of-list/"/>
    <updated>2014-07-13T21:37:56-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/13/remove-nth-node-from-end-of-list</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/remove-nth-node-from-end-of-list/">Question</a></p>

<hr />
<p>We need two pointers, first(<em>beforeRemovedNode</em> in the code) pointing to the head node, the next(<em>pointNode</em> in the code) pointing to the node <em>n</em> positions after head node. Then we move both pointer to its <em>next</em> position in the same time until the pointNode’s <em>next</em> is null. The we can remove the node just after <em>beforeRemovedNode</em> by doing </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>beforeRemoveNode.next = beforeRemoveNode.next.next;
</pre></div>
</div>
</div>

<p>Below is the whole code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode removeNthFromEnd(ListNode head, <span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="comment">/* beforeRemovedNode point to the head first</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="comment">         * pointNode point to the node n positions after beforeRemovedNode</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="comment">         */</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        ListNode pointNode = head;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        ListNode beforeRemoveNode = head;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="type">int</span> index = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="keyword">while</span> (index &lt;= n) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="keyword">if</span> (pointNode.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                <span class="keyword">return</span> head.next;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            pointNode = pointNode.next;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            index++;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        <span class="keyword">while</span>(pointNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            beforeRemoveNode = beforeRemoveNode.next;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            pointNode = pointNode.next;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        beforeRemoveNode.next = beforeRemoveNode.next.next;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        <span class="keyword">return</span> head;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rotate List]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/11/rotate-list/"/>
    <updated>2014-07-11T17:05:14-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/11/rotate-list</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/rotate-list/">Question</a></p>

<hr />
<p>For this question, note when n is larger than the length of the list, we need do the mod operation to get the remainder. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> ListNode rotateRight(ListNode head, <span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="type">int</span> len = getLength(head);
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span> || n == <span class="integer">0</span> || n % len == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="type">int</span> rotateIndex = len - n % len;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="type">int</span> index = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="comment">/* Find where to start rotate */</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        ListNode pointNode = head;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">while</span> (index &lt; rotateIndex) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            pointNode = pointNode.next;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            index++;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        ListNode startRotateNode = pointNode.next;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        pointNode.next = <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        <span class="comment">/* rotate, point the node before startRotateNode to null</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="comment">           point the last node in the rotated list to the head</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="comment">           return startRotateNode</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="comment">        */</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        ListNode rotateNode = startRotateNode;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        <span class="keyword">while</span>(rotateNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            rotateNode = rotateNode.next;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        rotateNode.next = head;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        <span class="keyword">return</span> startRotateNode;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    }
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    <span class="directive">public</span> <span class="type">int</span> getLength(ListNode head) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>        <span class="type">int</span> k = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>        <span class="keyword">while</span> (head != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>            head = head.next;
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            k++;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        }
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>        <span class="keyword">return</span> k;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Duplicates From Sorted List]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/10/remove-duplicates-from-sorted-list/"/>
    <updated>2014-07-10T23:25:13-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/10/remove-duplicates-from-sorted-list</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/remove-duplicates-from-sorted-list/">Question1</a></p>

<p><a href="https://oj.leetcode.com/problems/remove-duplicates-from-sorted-list-ii/">Question2</a></p>

<hr />
<p>Question 1 is very easy, I’ll just post my solution:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode deleteDuplicates(ListNode head) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode pointNode = head;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ListNode nextNode;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">while</span> ((nextNode = pointNode.next) != <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            <span class="keyword">if</span> (pointNode.val == nextNode.val) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                pointNode.next = nextNode.next;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                pointNode = pointNode.next;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        <span class="keyword">return</span> head;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }
</pre></div>
</div>
</div>

<p>For question 2, we need deal with more possible cases. We can use a <em>pivot node</em> to track. The basic idea is, if the first node is element, <em>pivot node</em> would be null and recursively call the first node after the duplicate nodesl; Otherwise, set the head node as the pivot node and begin to traverse. If we meet duplicates node, we skip them and point to <em>pivot node</em> to the next node which is not duplicate, update the pivot node to that node as well. We keep doing it until we meet the end of the list. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode deleteDuplicates(ListNode head) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span> || head.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode pointNode;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ListNode pivotNode;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="comment">/* if head node is duplicated, recursively call at the first node</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="comment">         * which is different with the head node</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="comment">         */</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">if</span> (head.val == head.next.val) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            pointNode = head;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="keyword">while</span> (pointNode.next != <span class="predefined-constant">null</span> &amp;&amp; pointNode.val == pointNode.next.val) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                pointNode = pointNode.next;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="keyword">return</span> deleteDuplicates(pointNode.next);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            <span class="comment">/* if head node is not duplicated, set it as pivot node</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="comment">             * if it's next node is not duplicated, set it's next node as new pivot node</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="comment">             * otherwise point pivotNode to the first node not duplicated, and set it as new pivot node</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="comment">             */</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            pivotNode = head;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            pointNode = head.next;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            <span class="keyword">while</span> (pointNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                <span class="keyword">if</span> (pointNode.val == pointNode.next.val) {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                    <span class="keyword">while</span> (pointNode.next != <span class="predefined-constant">null</span> &amp;&amp; pointNode.val == pointNode.next.val) {
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>                        pointNode = pointNode.next;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>                    }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                    <span class="keyword">if</span> (pointNode.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                        pivotNode.next = <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                        pointNode = pointNode.next;
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                        pivotNode.next = pointNode;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                    }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>                } <span class="keyword">else</span> {
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>                    pivotNode = pointNode;
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>                    pointNode = pointNode.next;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                }
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>            }
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Partition List]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/10/partition-list/"/>
    <updated>2014-07-10T21:46:09-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/10/partition-list</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/partition-list/">Question</a></p>

<hr />
<p>First, we need to find the first node whose <em>next</em> node’s value is not smaller than 3, which means the nodes before (and it self)this say,  <em>pivot node</em>, do not need to change. Next we traverse to see which node is smaller than <em>x</em>, put it after <em>pivot node</em>. Also note the special case where the head node’s value is larger than <em>x</em>, then the <em>pivot node</em> would be assigned later. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> ListNode partition(ListNode head, <span class="type">int</span> x) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode pointNode = head;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ListNode pivotNode;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="comment">/* Find the pivot node */</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="keyword">if</span> (head.val &lt; x) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="keyword">while</span> (pointNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                <span class="keyword">if</span> (pointNode.next.val &lt; x) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                    pointNode = pointNode.next;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                    <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            pivotNode = pointNode;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        } <span class="keyword">else</span> { <span class="comment">// if the head node's value is larger than x, then pivotNode is null</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            pivotNode = <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        <span class="comment">/* Traverse */</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        <span class="keyword">while</span> (pointNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            <span class="keyword">if</span> (pointNode.next.val &lt; x) {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                ListNode temp = pointNode.next;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>                pointNode.next = pointNode.next.next;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>                <span class="keyword">if</span> (pivotNode != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                    temp.next = pivotNode.next;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                    pivotNode.next = temp;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                    pivotNode = temp;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                    pivotNode = temp;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                    temp.next = head;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>                    head = temp;
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>                }
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                pointNode = pointNode.next;
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>            }
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        }
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        <span class="keyword">return</span> head;
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse Linked List II]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/10/reverse-linked-list-ii/"/>
    <updated>2014-07-10T15:48:08-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/10/reverse-linked-list-ii</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/reverse-linked-list-ii/">Question</a></p>

<hr />
<p>We need to take care of a situation when <em>m</em> equals to one, since it affects what we return. If <em>m=1</em>, then we return the last element in the list part that need reversed, otherwise we return the original head. </p>

<p>For the reverse operation, it’s helpful to know how to just simply reverse a linkedlist. Note we not only need to point node to its previous node, but also record the real next node. Therefore we need three pointers: <em>prev, curr, next</em>. Here is the code </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode reverseLinkedList(ListNode head) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span> || head.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode prev = head;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ListNode curr = head;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        ListNode next = head.next;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        head.next = <span class="predefined-constant">null</span>;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="keyword">while</span> (next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            curr = next;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            next = next.next;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            curr.next = prev;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            prev = curr;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        <span class="keyword">return</span> curr;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
</pre></div>
</div>
</div>

<p>With the help of this basic operation we can move to solve our original question. Here is the code </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode reverseBetween(ListNode head, <span class="type">int</span> m, <span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="type">int</span> index = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        ListNode pointNode;<span class="comment">// node used to traverse the list</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        ListNode listPrev; <span class="comment">// record the node before the reversed list part</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode listHead; <span class="comment">// record the head of the reversed list part</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        pointNode = head;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="keyword">while</span> (index + <span class="integer">1</span> &lt; m) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            pointNode = pointNode.next;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            index++;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        listPrev = pointNode;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        listHead = m == <span class="integer">1</span>? head : pointNode.next;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        ListNode prev = pointNode;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        ListNode curr = pointNode;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        ListNode next = pointNode.next;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        <span class="keyword">while</span> (index &lt; n) {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            curr = next;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>            next = next.next;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            curr.next = prev;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            prev = curr;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            index++;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        listHead.next = next;
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        <span class="keyword">if</span> (m == <span class="integer">1</span>) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>            <span class="keyword">return</span> curr;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>            listPrev.next = curr;
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>            <span class="keyword">return</span> head;    
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>        }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Two Numbers]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/02/add-two-numbers/"/>
    <updated>2014-07-02T17:39:28-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/02/add-two-numbers</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/add-two-numbers/">Question</a></p>

<hr />
<p>For this question, we need to take care of the carry from the previous calculation. Here I use a helper function <em>addHelper</em> to help maintain the information of the carry. Here follows the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode addTwoNumbers(ListNode l1, ListNode l2) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="keyword">return</span> addHelper(l1, l2, <span class="integer">0</span>);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="comment">/* @param carry:if there is a carry from previous caculation */</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="directive">private</span> ListNode addHelper(ListNode l1, ListNode l2, <span class="type">int</span> carry) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="keyword">if</span> (l1 == <span class="predefined-constant">null</span> &amp;&amp; l2 == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="keyword">return</span> carry == <span class="integer">1</span> ? <span class="keyword">new</span> ListNode(<span class="integer">1</span>) : <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        } <span class="keyword">else</span> <span class="keyword">if</span> (l1 == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            <span class="keyword">return</span> carry == <span class="integer">1</span> ? addHelper(l2, <span class="keyword">new</span> ListNode(<span class="integer">1</span>), <span class="integer">0</span>) : l2;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        } <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            <span class="keyword">return</span> carry == <span class="integer">1</span> ? addHelper(l1, <span class="keyword">new</span> ListNode(<span class="integer">1</span>), <span class="integer">0</span>) : l1;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="type">int</span> val1 = l1.val;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            <span class="type">int</span> val2 = l2.val;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            <span class="type">int</span> sum = carry + val1 + val2;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            ListNode lstNode = <span class="keyword">new</span> ListNode(sum % <span class="integer">10</span>);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            lstNode.next = (sum &gt;= <span class="integer">10</span>) ? (addHelper(l1.next, l2.next, <span class="integer">1</span>))
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                    : (addHelper(l1.next, l2.next, <span class="integer">0</span>));
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>            <span class="keyword">return</span> lstNode;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-08-12T16:55:20-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day12]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/08/12/relearn-java-day12/"/>
    <updated>2014-08-12T16:55:09-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/08/12/relearn-java-day12</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day11]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/08/11/relearn-java-day11/"/>
    <updated>2014-08-11T09:49:41-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/08/11/relearn-java-day11</id>
    <content type="html"><![CDATA[<ul>
  <li>Intro
    <ul>
      <li>memory -&gt; disk:
        <ul>
          <li>Output</li>
          <li>Write</li>
        </ul>
      </li>
      <li>disk -&gt; memory:
        <ul>
          <li>Input </li>
          <li>Read</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Byte Stream &amp; Character Stream
    <ul>
      <li>Byte Stream:
        <ul>
          <li>deal with one byte per time</li>
          <li>InputStream
            <ul>
              <li>FileInputStream</li>
            </ul>
          </li>
          <li>OutputStream
            <ul>
              <li>FileOutputStream</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Character Stream:
        <ul>
          <li>byte stream + code schedule, better for words communication</li>
          <li>Reader
            <ul>
              <li>FileReader</li>
              <li>BufferedReader
                <ul>
                  <li>increase the efficiency, read from buffer not disk</li>
                  <li>readLine()</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>Writer
            <ul>
              <li>OutputStreamWriter
                <ul>
                  <li>FileWriter</li>
                  <li>BufferedWriter
                    <ul>
                      <li>increase the efficiency</li>
                      <li>newLine()</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="predefined-type">FileReader</span> fr = <span class="keyword">new</span> <span class="predefined-type">FileReader</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">a.txt</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="predefined-type">FileWriter</span> fw = <span class="keyword">new</span> <span class="predefined-type">FileWriter</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">b.txt</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="type">char</span><span class="type">[]</span> buffer = <span class="keyword">new</span> <span class="type">char</span>[<span class="integer">1024</span>]
<span class="line-numbers"><a href="#n4" name="n4">4</a></span><span class="type">int</span> len;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span class="keyword">while</span>((len = fr.read(buffer)) != -<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    fw.write(buffer, <span class="integer">0</span>, len);
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>}
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="predefined-type">FileReader</span> fr = <span class="keyword">new</span> <span class="predefined-type">FileReader</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">a.txt</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="predefined-type">BufferedReader</span> br = <span class="keyword">new</span> <span class="predefined-type">BufferedReader</span>(fr);
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="predefined-type">FileWriter</span> fw = <span class="keyword">new</span> <span class="predefined-type">FileWriter</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">b.txt</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="predefined-type">BufferedWriter</span> bw = <span class="keyword">new</span> <span class="predefined-type">BufferedWriter</span>(fw);
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="predefined-type">String</span> len;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">while</span>((len = br.readLine()) != <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    bw.write(line);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    bw.newLine();
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    bw.flush();
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>Transfer between Byte Stream &amp; Character Stream
    <ul>
      <li>byte stream -&gt; character stream:
        <ul>
          <li>InputStreamReader(Input in)</li>
        </ul>
      </li>
      <li>character stream -&gt; byte stream:
        <ul>
          <li>OutputStreamWriter</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="predefined-type">BufferedReader</span> br = <span class="keyword">new</span> <span class="predefined-type">BufferedReader</span>(<span class="keyword">new</span> InputStreamReder(<span class="predefined-type">System</span>.in));
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="predefined-type">BufferedWriter</span> bw = <span class="keyword">new</span> <span class="predefined-type">BufferedWriter</span>(<span class="keyword">new</span> <span class="predefined-type">OutputStreamWriter</span>(<span class="predefined-type">System</span>.out));
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="predefined-type">String</span> line = <span class="predefined-constant">null</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="keyword">while</span> ((line = br.readLine()) != <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="keyword">if</span> (<span class="string"><span class="delimiter">&quot;</span><span class="content">over</span><span class="delimiter">&quot;</span></span>.equals(line)) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="keyword">break</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    bw.write(line);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    bw.newLine();
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    bw.flush();
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>Basic rule
    <ul>
      <li>
        <ol>
          <li>make sure the sourse &amp; destination
            <ul>
              <li>source: InputStream Reader</li>
              <li>destination: OutputStream Writer</li>
            </ul>
          </li>
        </ol>
      </li>
      <li>
        <ol>
          <li>make sure if the data is character
            <ul>
              <li>source: </li>
              <li>character : Reader</li>
              <li>byte : InputStream</li>
              <li>destination:</li>
              <li>character : Writer</li>
              <li>byte : OutputStream</li>
            </ul>
          </li>
        </ol>
      </li>
      <li>
        <ol>
          <li>make sure the device
            <ul>
              <li>source:</li>
              <li>disk : File</li>
              <li>keyboard : System.in</li>
              <li>memory : array</li>
              <li>network : Socket stream</li>
              <li>destination:</li>
              <li>disk : File</li>
              <li>keyboard : System.out</li>
              <li>memory : array</li>
              <li>network : Socket stream</li>
            </ul>
          </li>
        </ol>
      </li>
      <li>
        <ol>
          <li>make sure if other function needed:
            <ul>
              <li>
                <ol>
                  <li>buffer: BufferedReader, BufferedWriter</li>
                </ol>
              </li>
              <li>
                <ol>
                  <li>transfer: InputStreamReader, OutputStreamWriter</li>
                </ol>
              </li>
              <li>
                <ol>
                  <li>Chinese character write to file according to coding schedule</li>
                </ol>
              </li>
              <li>FileWriter : ByteStream + default coding schedule</li>
              <li>If coding schedule specified, need OutputStreamWriter()</li>
              <li>same with Reader and InputStreamReader()</li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 10]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/08/09/relearn-java-day-10/"/>
    <updated>2014-08-09T09:07:19-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/08/09/relearn-java-day-10</id>
    <content type="html"><![CDATA[<ul>
  <li>Map:
    <ul>
      <li>key-value pairs</li>
      <li>HashTable
        <ul>
          <li>synchronized</li>
          <li>no null key or value</li>
        </ul>
      </li>
      <li>HashMap
        <ul>
          <li>data structure same with HashTable, not synchronized</li>
          <li>could have null key and value</li>
        </ul>
      </li>
      <li>TreeMap
        <ul>
          <li>data structure : binary tree</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<ul>
  <li>Generics
    <ul>
      <li>
        <type variable=""> no primitive type
</type>
      </li>
      <li>Benefit:
        <ul>
          <li>runtime issue -&gt; compile time</li>
          <li>avoid casting </li>
        </ul>
      </li>
      <li>when in runtime, no generics
        <ul>
          <li>in .class file, generics would be erased </li>
        </ul>
      </li>
      <li>could be defined both on class and method:
        <ul>
          <li>class: class GenericTest<t> {}</t></li>
          <li>public <t> void show(T t){}</t></li>
          <li>for static method, cannot access generics on class, only can access generics on method:
            <ul>
              <li>public static <t> void show(T t) {}</t></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Generics interface</li>
      <li>wildcard chracter:
        <ul>
          <li>&lt;? extends E&gt; : E or E’s subclasses</li>
          <li>&lt;? super E&gt; : E or E’s superclasses </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 9]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/08/07/relearn-java-day-9/"/>
    <updated>2014-08-07T20:37:52-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/08/07/relearn-java-day-9</id>
    <content type="html"><![CDATA[<ul>
  <li>String:
    <ul>
      <li>When String object is created, it won’t be changed</li>
      <li>Construction:
        <ul>
          <li>String s = “abc”;
            <ul>
              <li>string pool, if exist, take the object directly, otherwise create a new one</li>
            </ul>
          </li>
          <li>String s = new String(“abc”);
            <ul>
              <li>created the object in Heap not in string pool</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>StringBuffer
    <ul>
      <li>length could be changed, could be changed with different string</li>
      <li>difference with StringBuilder
        <ul>
          <li>StringBuilder is faster but not support synchronization</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>transfer between primitive type and string
    <ul>
      <li>primitive type —&gt; string
        <ul>
          <li>primitive type + “”</li>
          <li>String.valueOf()</li>
        </ul>
      </li>
      <li>string —&gt; primitive type
        <ul>
          <li>Wrapper Class(say, Integer).parseInt(“”);</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<ul>
  <li>Collection:
    <ul>
      <li>store object</li>
      <li>could change the length</li>
      <li>cannot store primitive type data(arrays can)</li>
    </ul>
  </li>
  <li>Iterator:
    <ul>
      <li>implement Iterator interface</li>
      <li>a private class in concrete objects</li>
      <li>ListIterator: could change object when traverse through(general iterator cannnot)</li>
    </ul>
  </li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="predefined-type">Iterator</span> it = collecton.iterator();
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="keyword">while</span>(it.hasNext()) {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="predefined-type">System</span>.out.println(it.next());
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>List &amp; Set
    <ul>
      <li>List: has order, with index
        <ul>
          <li>Vector:
            <ul>
              <li>array, length could be changed</li>
              <li>synchronized</li>
            </ul>
          </li>
          <li>ArrayList
            <ul>
              <li>array, length could be changed</li>
              <li>not synchronized</li>
              <li>good for retrieve</li>
            </ul>
          </li>
          <li>LinkedList
            <ul>
              <li>linked list</li>
              <li>not synchronized</li>
              <li>good for add/delete</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Set: no order, without repetition
        <ul>
          <li>HashSet
            <ul>
              <li>compare according to hashCode()</li>
            </ul>
          </li>
          <li>TreeSet
            <ul>
              <li>has order
                <ul>
                  <li>1.object implements Comparable, override compareTo()</li>
                  <li>2.create comparator, implements compare(), sent it as argument to TreeSet() constructor</li>
                </ul>
              </li>
              <li>compare according to compareTo(), if return 0, regarded as the same element</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Utilities
    <ul>
      <li>Collections
        <ul>
          <li>all methods are static</li>
        </ul>
      </li>
      <li>Arrays
        <ul>
          <li>all methods are static</li>
          <li>asList() -&gt; arrays -&gt; List
            <ul>
              <li>can’t use add/delete as the length of array is unchangeble</li>
              <li>if arrays of primitive type, list will only contain the array obj</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>JDK 1.5 new stuff	
    <ul>
      <li>For each:
        <ul>
          <li>array or class implements <strong>iterable</strong></li>
        </ul>
      </li>
      <li>variable arguments:
        <ul>
          <li>void show(int… arr)</li>
          <li>must defined as the last argument  </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 8]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/08/05/relearn-java-day-8/"/>
    <updated>2014-08-05T09:12:55-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/08/05/relearn-java-day-8</id>
    <content type="html"><![CDATA[<ul>
  <li>
    <p>Thread : a thread of execution is the smallest sequence of programmed instructions that can be managed independently by a scheduler</p>
  </li>
  <li>Thread creation:
    <ul>
      <li>1.extends Thread class
        <ul>
          <li>create a class, extends Thread class</li>
          <li>override run method</li>
          <li>create thread instance </li>
          <li>call start() method to start a thread, which will call run</li>
        </ul>
      </li>
      <li>2.implements 	Runnable (normally used)
        <ul>
          <li>create a class, implements Runnable interface</li>
          <li>override run method</li>
          <li>create Thread instance with Runnable instance as argument</li>
          <li>call start() method to start </li>
          <li>benefit:
            <ul>
              <li>multiple inheritance</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Thread state: <a href="http://www.uml-diagrams.org/examples/java-6-thread-state-machine-diagram-example.html">Click Here</a></p>
  </li>
  <li>Thread Safety
    <ul>
      <li>Unsafety Reason:
        <ul>
          <li>shared data</li>
          <li>multiple thread operate on the shared data</li>
        </ul>
      </li>
      <li>How to deal with:
        <ul>
          <li>synchronized
            <ul>
              <li>synchornized block 
                <ul>
                  <li>synchornized(lock obj){}</li>
                </ul>
              </li>
              <li>synchornized method
                <ul>
                  <li>public synchronized void func()</li>
                  <li>lock of synchronized method:
                    <ul>
                      <li>this</li>
                      <li>static synchronized method:
                        <ul>
                          <li>this.getClass()</li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                  <li>difference with synchronized block:
                    <ul>
                      <li>lock is different</li>
                      <li></li>
                    </ul>
                  </li>
                </ul>
              </li>
              <li>good and bad:
                <ul>
                  <li>good: solve synchronization problem</li>
                  <li>bad : decrease efficiency</li>
                </ul>
              </li>
              <li>precondition:
                <ul>
                  <li>multiple thread with one lock</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Deadlock</li>
    </ul>
  </li>
  <li>Communication between Threads:
      * shared data, different tasks
      * wait() &amp; notify()/notifyAll():
          * according to the related lock
              * lock.wait() &amp; lock.notify()/notifyAll()</li>
  <li>Lock &amp; Condition:<strong>java.util.concurrent.lock</strong>
    <ul>
      <li>replace synchronized &amp; Object monitor method</li>
      <li>encapsulate the lock to an object
        <ul>
          <li>Lock lock = new ReentrantLock(); lock.lock(); lock.unlock();</li>
          <li>normally put unlock in <strong>finally</strong> block</li>
        </ul>
      </li>
      <li>Condition:
        <ul>
          <li>Condition factors out the Object monitor methods (wait, notify and notifyAll) into distinct objects </li>
          <li>A Condition instance is intrinsically bound to a lock. To obtain a Condition instance for a particular Lock instance use its newCondition() method. </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Day One Pattern : Factory Pattern]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/28/one-day-one-pattern-factory-pattern/"/>
    <updated>2014-07-28T11:12:16-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/28/one-day-one-pattern-factory-pattern</id>
    <content type="html"><![CDATA[<ul>
  <li>Purpose:
    <ul>
      <li>Take out the responsibility of instantiation of a class from client program to the factory class. </li>
    </ul>
  </li>
  <li>Implementation Details:
    <ul>
      <li>Can apply Singleton pattern on Factory class or make the factory method static.</li>
      <li>One Super Class, which can be interface, abstract class or normal class</li>
      <li>Several sub classes extending the super class</li>
    </ul>
  </li>
  <li>Example:</li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">FactoryClass</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="directive">public</span> <span class="directive">static</span> Super getSub(<span class="predefined-type">String</span> type) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="keyword">if</span> (<span class="string"><span class="delimiter">&quot;</span><span class="content">1</span><span class="delimiter">&quot;</span></span>.equals(type)) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>            <span class="keyword">return</span> <span class="keyword">new</span> Sub1();
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        } 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="keyword">if</span> (<span class="string"><span class="delimiter">&quot;</span><span class="content">2</span><span class="delimiter">&quot;</span></span>.equals(type)) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            <span class="keyword">return</span> <span class="keyword">new</span> Sub2();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        Super sub1 = FactoryClass.getSub(<span class="string"><span class="delimiter">&quot;</span><span class="content">1</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        Super sub2 = FactoryClass.getSub(<span class="string"><span class="delimiter">&quot;</span><span class="content">2</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>}
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="directive">abstract</span> <span class="type">class</span> <span class="class">Super</span> {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span class="directive">public</span> <span class="directive">abstract</span> <span class="predefined-type">String</span> getName();
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span class="annotation">@Override</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> toString() {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">name = </span><span class="delimiter">&quot;</span></span> + <span class="local-variable">this</span>.getName();
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>}
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span class="type">class</span> <span class="class">Sub1</span> <span class="directive">extends</span> Super {
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span class="annotation">@Override</span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> getName() {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">Sub1</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    }
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>}
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>
<span class="line-numbers"><a href="#n37" name="n37">37</a></span><span class="type">class</span> <span class="class">Sub2</span> <span class="directive">extends</span> Super {
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>    <span class="annotation">@Override</span>
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>    <span class="directive">public</span> <span class="predefined-type">String</span> getName() {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>        <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">Sub2</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>    }
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>Benifits:
    <ul>
      <li>instantiate class from interface rather then implemention</li>
      <li>less coupled, easy to extend</li>
    </ul>
  </li>
  <li>For more : <a href="http://www.journaldev.com/1392/factory-design-pattern-in-java">Factory Design Pattern</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 7]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/25/relearn-java-day-7/"/>
    <updated>2014-07-25T08:31:36-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/25/relearn-java-day-7</id>
    <content type="html"><![CDATA[<ul>
  <li>exception:
    <ul>
      <li>using class to describe bad situations</li>
      <li>Throwable
        <ul>
          <li>Error:cannot handle, throwed by jvm</li>
          <li>Exception:can handle
            <ul>
              <li>RuntimeException, check when running</li>
              <li>OtherException, check when compiling</li>
            </ul>
          </li>
          <li>throw the throwable object let caller know</li>
        </ul>
      </li>
      <li>Self-defined exception class</li>
    </ul>
  </li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="predefined-type">Class</span> MyException <span class="directive">extends</span> <span class="exception">Exception</span> {}
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="directive">public</span> <span class="type">void</span> testException <span class="directive">throws</span> MyException {
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    <span class="keyword">throw</span> <span class="keyword">new</span> MyException();
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>throw &amp; throws:
    <ul>
      <li>throws: declare on function, throws one or more Exception</li>
      <li>throw: declare in function, throw an object</li>
    </ul>
  </li>
  <li>finally:
    <ul>
      <li>always executed except for System.exit()</li>
      <li>format
        <ul>
          <li>try catch finally</li>
          <li>try catch</li>
          <li>try finally , release resource but throws exception</li>
        </ul>
      </li>
      <li>normally used to release resource</li>
    </ul>
  </li>
  <li>principles:
    <ul>
      <li>if exception(need check when compile) throwed inside function, need throws it on function </li>
      <li>caller need catch or throws this exception
        <ul>
          <li>if could be solved, use catch</li>
          <li>if cannot be solved, use throws</li>
        </ul>
      </li>
      <li>multiple exceptions corresponds to multiple catches</li>
      <li>for inheritance, override a method: child class can only throw the father’s exception or the exceptions’ child class or its subset. If father did not throws any exception, child cannot throw exception.</li>
    </ul>
  </li>
</ul>

<hr />
<ul>
  <li>Object
    <ul>
      <li>boolean equals(Obj o): can be override and used for compare objects</li>
      <li>int hashCode(): modified if equals() is override</li>
      <li>toString():what will be printed by System.out.print</li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 6]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/24/relearn-java-day-6/"/>
    <updated>2014-07-24T08:14:42-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/24/relearn-java-day-6</id>
    <content type="html"><![CDATA[<ul>
  <li>interface
    <ul>
      <li>all methods are abstract : public abstract</li>
      <li>global variable : public static final</li>
      <li>class <em>implements</em> interface : multi implements</li>
      <li>interface <em>extends</em> interface : multi extends</li>
      <li>loose coupling </li>
    </ul>
  </li>
  <li>poymorphism:
    <ul>
      <li>one object, two form</li>
      <li>Father class/interface reference points to child class</li>
      <li>increase the expandability</li>
      <li>premise:
        <ul>
          <li>inheritance</li>
          <li>overide</li>
        </ul>
      </li>
      <li>Casting:
        <ul>
          <li>upcasting Animal a = new Cat();</li>
          <li>downcasting Cat c = (Cat)a;
            <ul>
              <li>use instance of to determine the child class:
  if (a instance of Cat)</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>member :
        <ul>
          <li>member variable:
            <ul>
              <li>compile &amp; run : refer to the <strong>reference type</strong> variable</li>
            </ul>
          </li>
          <li>member function:
            <ul>
              <li>compile : refer to the <strong>reference type</strong> function</li>
              <li>run : refer to <strong>actual type</strong> function</li>
            </ul>
          </li>
          <li>static function: no need for binded object
            <ul>
              <li>compile &amp; run : refer to the reference type variable</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>inner class
    <ul>
      <li>inner class can directly access the members in outer class
        <ul>
          <li>it has the reference to the Outer Class : Outer.this</li>
        </ul>
      </li>
      <li>outer class need object of inner class to access the members in it</li>
      <li>other class access inner class:
        <ul>
          <li>Outer.Inner in = new Outer().new Inner();// not static</li>
          <li>Outer.Inner in = new Outer.Inner(); //Outer static</li>
          <li>Outer.Inner.func() // both Outer and Inner are static</li>
          <li>while for most time, inner class is <strong>private</strong></li>
        </ul>
      </li>
      <li>local inner class:
        <ul>
          <li>can only access local members which is final</li>
        </ul>
      </li>
      <li>anonymous inner class:
        <ul>
          <li>premise: inner class extends or implements a outer class or interface</li>
          <li>actually anonymous child class</li>
          <li>new Father Class/Interface() {}.function()</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Count and Say]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/19/count-and-say/"/>
    <updated>2014-07-19T09:04:58-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/19/count-and-say</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/count-and-say/">Question</a></p>

<hr />
<p>We use a <em>countAndSayHelper</em> function to generate “next” count and say sequence. Here we need traverse through the string, compare each character with its next one, if they are the same, we add the <em>count</em> and keep going. If not, we concatenate the <em>count</em> and the <em>character</em> together and append it to a stringbuilder. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> countAndSay(<span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="predefined-type">String</span> s = <span class="predefined-type">String</span>.valueOf(n);
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; n; i++) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>            s = countAndSayHelper(s);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="keyword">return</span> s;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    }
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="directive">public</span> <span class="predefined-type">String</span> countAndSayHelper(<span class="predefined-type">String</span> s) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="predefined-type">StringBuilder</span> sb = <span class="keyword">new</span> <span class="predefined-type">StringBuilder</span>();
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; s.length(); i++) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            <span class="type">char</span> c = s.charAt(i);
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="type">int</span> count = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            <span class="type">char</span> next_c;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            <span class="keyword">while</span> (i != s.length() - <span class="integer">1</span> &amp;&amp; (next_c = s.charAt(i + <span class="integer">1</span>)) == c) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                count++;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                i++;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            }        
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            sb.append(count);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            sb.append(c);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        <span class="keyword">return</span> sb.toString();
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roman to Integer]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/19/roman-to-integer/"/>
    <updated>2014-07-19T01:01:14-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/19/roman-to-integer</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/roman-to-integer/">Question</a></p>

<hr />
<p>This question is the inverse version of <a href="http://www.codertkk.com/blog/2014/07/18/integer-to-roman/"><em>Integer to Roman</em></a>. We need to take care of different situations of <a href="http://en.wikipedia.org/wiki/Roman_numerals">Roman Numerals</a>, here is the code:</p>

<div class="language-java"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    public int romanToInt(String s) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        int returnValue = 0;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        for(int i = 0; i &lt; s.length(); i++) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            if (s.charAt(i) == 'M') {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>                returnValue += 1000;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            } else if (s.charAt(i) == 'D') {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                returnValue += 500;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            } else if (s.charAt(i) == 'C') {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                if (i == s.length() -1) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                    returnValue += 100;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                } else if (s.charAt(i + 1) == 'M') {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                    i++;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                    returnValue += 900;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                    
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                } else if (s.charAt(i + 1) == 'D') {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                    i++;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                    returnValue += 400;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                } else {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                    returnValue += 100;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                }
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            } else if (s.charAt(i) == 'L') {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                returnValue += 50;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>            } else if (s.charAt(i) == 'X') {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                if (i == s.length() -1) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>                    returnValue += 10;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                } else if (s.charAt(i + 1) == 'C') {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                    i++;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>                    returnValue += 90;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>                    
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>                } else if (s.charAt(i + 1) == 'L') {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                    i++;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                    returnValue += 40;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                } else {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                    returnValue += 10;
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                }
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>            } else if (s.charAt(i) == 'V') {
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>                returnValue += 5;
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            } else {
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>                if (i == s.length() -1) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>                    returnValue += 1;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                } else if (s.charAt(i + 1) == 'X') {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>                    i++;
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>                    returnValue += 9;
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>                    
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>                } else if (s.charAt(i + 1) == 'V') {
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>                    i++;
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>                    returnValue += 4;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>                } else {
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>                    returnValue += 1;
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>                }
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>            }
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>            
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>        }
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>        return returnValue;
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>    }
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integer to Roman]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/18/integer-to-roman/"/>
    <updated>2014-07-18T22:28:45-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/18/integer-to-roman</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/integer-to-roman/">Question</a></p>

<hr />
<p>For the number on <em>hundred, ten, one</em> bits, there are four situations, 9, 8-5, 4, 3-1. We can deal with this question using the code below,</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="predefined-type">StringBuilder</span> sb;
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> intToRoman(<span class="type">int</span> num) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">int</span> digit;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        sb = <span class="keyword">new</span> <span class="predefined-type">StringBuilder</span>();
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="comment">/* thousand */</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="keyword">if</span> (num &gt;= <span class="integer">1000</span>) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            digit = num / <span class="integer">1000</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">M</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            num -= digit * <span class="integer">1000</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span class="comment">/* handred */</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        <span class="keyword">if</span> (num &gt;= <span class="integer">100</span>) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="keyword">if</span> (num &gt;= <span class="integer">900</span>) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">CM</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                num -= <span class="integer">900</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">500</span>) {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">D</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                num -= <span class="integer">500</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                digit = num / <span class="integer">100</span>;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>                    sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">C</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                num -= digit * <span class="integer">100</span>;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">400</span>) {
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">CD</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>                num -= <span class="integer">400</span>;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                digit = num / <span class="integer">100</span>;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                    sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">C</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                }
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                num -= digit * <span class="integer">100</span>;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>            }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>        }
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>        <span class="comment">/* ten */</span>
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>        <span class="keyword">if</span> (num &gt;= <span class="integer">10</span>) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>            <span class="keyword">if</span> (num &gt;= <span class="integer">90</span>) {
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">XC</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>                num -= <span class="integer">90</span>;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">50</span>) {
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">L</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>                num -= <span class="integer">50</span>;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>                
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>                digit = num / <span class="integer">10</span>;
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>                    sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">X</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>                }
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>                num -= digit * <span class="integer">10</span>;
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>             } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">40</span>) {
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>                 sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">XL</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>                 num -= <span class="integer">40</span>;
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>             } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>                digit = num / <span class="integer">10</span>;
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>                    sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">X</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>                }
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>                num -= digit * <span class="integer">10</span>;
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>             }
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>        }
<span class="line-numbers"><a href="#n66" name="n66">66</a></span>        
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>        <span class="comment">/* one */</span>
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>        <span class="keyword">if</span> (num &gt;= <span class="integer">1</span>) {
<span class="line-numbers"><a href="#n69" name="n69">69</a></span>            <span class="keyword">if</span> (num &gt;= <span class="integer">9</span>) {
<span class="line-numbers"><strong><a href="#n70" name="n70">70</a></strong></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">IX</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n71" name="n71">71</a></span>                num -= <span class="integer">9</span>;
<span class="line-numbers"><a href="#n72" name="n72">72</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">5</span>) {
<span class="line-numbers"><a href="#n73" name="n73">73</a></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">V</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n74" name="n74">74</a></span>                num -= <span class="integer">5</span>;
<span class="line-numbers"><a href="#n75" name="n75">75</a></span>                
<span class="line-numbers"><a href="#n76" name="n76">76</a></span>                digit = num / <span class="integer">1</span>;
<span class="line-numbers"><a href="#n77" name="n77">77</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n78" name="n78">78</a></span>                    sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">I</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n79" name="n79">79</a></span>                }
<span class="line-numbers"><strong><a href="#n80" name="n80">80</a></strong></span>                num -= digit * <span class="integer">1</span>;
<span class="line-numbers"><a href="#n81" name="n81">81</a></span>             } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">4</span>) {
<span class="line-numbers"><a href="#n82" name="n82">82</a></span>                 sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">IX</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n83" name="n83">83</a></span>                 num -= <span class="integer">4</span>;
<span class="line-numbers"><a href="#n84" name="n84">84</a></span>             } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n85" name="n85">85</a></span>                digit = num / <span class="integer">1</span>;
<span class="line-numbers"><a href="#n86" name="n86">86</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n87" name="n87">87</a></span>                    sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">I</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n88" name="n88">88</a></span>                }
<span class="line-numbers"><a href="#n89" name="n89">89</a></span>                num -= digit * <span class="integer">1</span>;
<span class="line-numbers"><strong><a href="#n90" name="n90">90</a></strong></span>             }
<span class="line-numbers"><a href="#n91" name="n91">91</a></span>        }
<span class="line-numbers"><a href="#n92" name="n92">92</a></span>
<span class="line-numbers"><a href="#n93" name="n93">93</a></span>        <span class="keyword">return</span> sb.toString();
<span class="line-numbers"><a href="#n94" name="n94">94</a></span>
<span class="line-numbers"><a href="#n95" name="n95">95</a></span>    }
</pre></div>
</div>
</div>

<p>However, this solution is redundant, as for each digit on hundred, ten, one would meet similar situations, we can extract a helper function to deal with them. Here is the modified function:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="predefined-type">StringBuilder</span> sb;
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="type">int</span> num;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> intToRoman(<span class="type">int</span> num) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="type">int</span> digit;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="local-variable">this</span>.num = num;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        sb = <span class="keyword">new</span> <span class="predefined-type">StringBuilder</span>();
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="comment">/* thousand */</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="keyword">if</span> (num &gt;= <span class="integer">1000</span>) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            digit = num / <span class="integer">1000</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                sb.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">M</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="local-variable">this</span>.num -= digit * <span class="integer">1000</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        <span class="comment">/* handred */</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        buildHelper(<span class="local-variable">this</span>.num, <span class="integer">100</span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">M</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">D</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">C</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        <span class="comment">/* ten */</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        buildHelper(<span class="local-variable">this</span>.num, <span class="integer">10</span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">C</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">L</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">X</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        <span class="comment">/* one */</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        buildHelper(<span class="local-variable">this</span>.num, <span class="integer">1</span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">X</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">V</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">I</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        <span class="keyword">return</span> sb.toString();
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span class="directive">public</span> <span class="type">void</span> buildHelper(<span class="type">int</span> num, <span class="type">int</span> base, <span class="predefined-type">String</span> tenS, <span class="predefined-type">String</span> fiveS, <span class="predefined-type">String</span> oneS) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        <span class="type">int</span> digit;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        <span class="keyword">if</span> (num &gt;= base) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>            <span class="keyword">if</span> (num &gt;= <span class="integer">9</span> * base) {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                sb.append(oneS + tenS);
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                num -= <span class="integer">9</span> * base;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">5</span> * base) {
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>                sb.append(fiveS);
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>                num -= <span class="integer">5</span> * base;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>                
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>                digit = num / base;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>                    sb.append(oneS);
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>                }
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>                num -= digit * base;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="integer">4</span> * base) {
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>                sb.append(oneS + fiveS);
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>                num -= <span class="integer">4</span> * base;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>                digit = num / base;
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digit; i++) {
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>                    sb.append(oneS);
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>                }
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>                num -= digit * base;
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>            }
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>        }
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>        <span class="local-variable">this</span>.num = num;
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Valid Number]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/18/valid-number/"/>
    <updated>2014-07-18T21:22:34-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/18/valid-number</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/valid-number/">Question</a></p>

<hr />
<p>This question isn’t tricky but many requirements need be meet. For these requirements, I　comment them in the code following below:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">boolean</span> isNumber(<span class="predefined-type">String</span> s) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="comment">/* trim the leading and trailing space, if there's space in the middle, return false */</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        s = s.trim();
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="keyword">if</span> (s == <span class="predefined-constant">null</span> || s.isEmpty()) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        }
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="comment">/* s could cantain ONE '.' and ONE 'e' */</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="type">boolean</span> dotFlag = <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="type">boolean</span> eFlag = <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="comment">/* For '.', there must either be number before it or after it</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="comment">         * For 'e', there must be number before and after it */</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; s.length(); i++) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="type">char</span> c = s.charAt(i);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            <span class="keyword">if</span> (<span class="predefined-type">Character</span>.isDigit(c)) 
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                <span class="keyword">continue</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content">.</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                <span class="comment">/* if '.' is after 'e', return false */</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                <span class="keyword">if</span> (!eFlag || !dotFlag || !(isNumber(s.substring(<span class="integer">0</span>, i)) || isNumber(s.substring(i + <span class="integer">1</span>)))) 
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                    <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>                <span class="keyword">if</span> (!eFlag) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                    
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>                dotFlag = <span class="predefined-constant">false</span>;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content">e</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>                <span class="keyword">if</span> (!eFlag|| !isNumber(s.substring(<span class="integer">0</span>, i)) || !isNumber(s.substring(i + <span class="integer">1</span>))) 
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                    <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                eFlag = <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content">-</span><span class="delimiter">'</span></span> || c == <span class="string"><span class="delimiter">'</span><span class="content">+</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                <span class="comment">/* '-' and '+' must be at the first character, and followed by valid number */</span>
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                <span class="keyword">if</span> (!isNumber(s.substring(i + <span class="integer">1</span>))) {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                    <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>                }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>                
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>                <span class="keyword">if</span> (!(i == <span class="integer">0</span> || s.charAt(i - <span class="integer">1</span>) == <span class="string"><span class="delimiter">'</span><span class="content">e</span><span class="delimiter">'</span></span>)) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>                    <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                }
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>                <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>            }
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>        <span class="keyword">return</span> <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Common Prefix]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/17/longest-common-prefix/"/>
    <updated>2014-07-17T17:07:46-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/17/longest-common-prefix</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/longest-common-prefix/">Question</a></p>

<hr />
<p>We take the first string of the array as a <em>test string</em>, starting from its first character and comparing to each string in the array. We compare each character until the character doesn’t match in one of the compares or the length has exceeded the shortest string. We can return the substring of the <em>test string</em> as a result. Here is the result:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> longestCommonPrefix(<span class="predefined-type">String</span><span class="type">[]</span> strs) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (strs == <span class="predefined-constant">null</span>) <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="keyword">if</span> (strs.length == <span class="integer">0</span>) <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="predefined-type">String</span> testString = strs[<span class="integer">0</span>];
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="type">int</span> index = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">while</span>(index &lt; testString.length()) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            <span class="type">char</span> cAtIndex = testString.charAt(index);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; strs.length; i++) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                <span class="keyword">if</span> (index &gt;= strs[i].length() || strs[i].charAt(index) != cAtIndex) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                    <span class="keyword">return</span> testString.substring(<span class="integer">0</span>, index);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            index++;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        <span class="keyword">return</span> testString;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Palindromic Substring]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/16/longest-palindromic-substring/"/>
    <updated>2014-07-16T09:25:36-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/16/longest-palindromic-substring</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/longest-palindromic-substring/">Question</a></p>

<hr />
<p>We use two pointers pointing to the middle of the string, then move them to each side if the character they pointing to are the same. Note substring is continuous and we need take care of both odd and even length situations. The code follows below:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> longestPalindrome(<span class="predefined-type">String</span> s) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="predefined-type">String</span> longestPalindromeString = <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; s.length(); i++) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>            <span class="predefined-type">String</span> palindrome = findLongestPalindrome(s, i, i);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            <span class="keyword">if</span> (palindrome.length() &gt; longestPalindromeString.length()) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>                longestPalindromeString = palindrome;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            }
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; s.length(); i++) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="predefined-type">String</span> palindrome = findLongestPalindrome(s, i - <span class="integer">1</span>, i);
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="keyword">if</span> (palindrome.length() &gt; longestPalindromeString.length()) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                longestPalindromeString = palindrome;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        <span class="keyword">return</span> longestPalindromeString;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> findLongestPalindrome(<span class="predefined-type">String</span> s, <span class="type">int</span> i, <span class="type">int</span> j) {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        <span class="keyword">while</span> (i &gt;= <span class="integer">0</span> &amp;&amp; j &lt; s.length() &amp;&amp; s.charAt(i) == s.charAt(j)) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            i--;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            j++;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        <span class="keyword">return</span> s.substring(i + <span class="integer">1</span>, j);
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Day One Pattern : Singleton]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/15/one-day-one-pattern-singleton/"/>
    <updated>2014-07-15T09:00:14-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/15/one-day-one-pattern-singleton</id>
    <content type="html"><![CDATA[<ul>
  <li>Example:
    <ul>
      <li>Java Runtime Class</li>
    </ul>
  </li>
  <li>Purpose:
    <ul>
      <li>Restrict the creations of objects. Only one instance(of the class) could be created.</li>
    </ul>
  </li>
  <li>Implementation Details:
    <ul>
      <li>Private Constructor</li>
      <li>Private static variable that is the only instance of the class.</li>
      <li>Public static method that returns the instance of the class</li>
    </ul>
  </li>
  <li>Example:</li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">SingletonClass</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>     
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="comment">/* private constructor to avoid client applications to use constructor */</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="directive">private</span> SingletonClass(){}
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="comment">/* for thread safety purpose */</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="directive">private</span> <span class="directive">static</span> <span class="type">class</span> <span class="class">SingletonHelper</span>{
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="directive">private</span> <span class="directive">static</span> <span class="directive">final</span> SingletonClass INSTANCE = <span class="keyword">new</span> SingletonClass();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="directive">public</span> <span class="directive">static</span> SingletonClass getInstance(){
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="comment">/* Lazy initialization */</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="keyword">return</span> SingletonHelper.INSTANCE;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>Further &amp; Deeper understanding : <a href="http://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-with-examples">Singleton Design Pattern</a></li>
  <li>Reference may be needed:
    <ul>
      <li><a href="http://www.programmerinterview.com/index.php/java-questions/inner-vs-nested-classes/">difference between an inner and nested class in Java</a></li>
      <li><a href="http://stackoverflow.com/questions/1353309/java-static-vs-non-static-inner-class">difference between static and non-static nested classes(inner class)</a>
        <ul>
          <li>A static nested class does not have a reference to a nesting instance, so a static nested class cannot invoke non-static methods or access non-static fields of an instance of the class within which it is nested.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 5]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/15/relearn-java-day-5/"/>
    <updated>2014-07-15T08:27:04-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/15/relearn-java-day-5</id>
    <content type="html"><![CDATA[<ul>
  <li>super:
    <ul>
      <li>represent the father class</li>
      <li>there is invisible super() at the <strong>first</strong> sentence in the construction function of child class </li>
    </ul>
  </li>
  <li>
    <p>override &amp; overload </p>
  </li>
  <li>
    <p>initialization<br />
  Person p = new Person()</p>

    <ul>
      <li>JVM load Person.class to memory, if it has Father Class, load the Father class first.</li>
      <li>Allocate space in Heap </li>
      <li>Initialize variables with default value</li>
      <li>Call construct function</li>
      <li>In the first line, call Father’s construct function</li>
      <li>After the Father initialized, assign the specific value to the variables</li>
    </ul>
  </li>
  <li>final<br />
    <ul>
      <li>final class cannot be extended</li>
      <li>final method cannot be override</li>
      <li>final variable is a constant</li>
    </ul>
  </li>
  <li>abstract class
    <ul>
      <li>cannot be initialized</li>
      <li>when a method only clarified not implemented, declare it as <strong>abstract</strong> method, declare its class <strong>abstract</strong></li>
      <li>cannot contain <strong>private, static, final</strong>  </li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Binary]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/14/add-binary/"/>
    <updated>2014-07-14T19:44:41-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/14/add-binary</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/add-binary/">Question</a></p>

<hr />
<p>As the string could be very long, we could not use the functions given in the Integer class, we need add operation ourselves. Basically, the strategy is adding the common part, then dealt with the remaining part, note we need take care of the <em>carry</em> all the way through. For example, when adding “101” and “10”, we add “01” and “10” firstly, then add “1” as the remaining part. Here is the implementation code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> addBinary(<span class="predefined-type">String</span> a, <span class="predefined-type">String</span> b) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="type">int</span> carry = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="predefined-type">StringBuilder</span> sb = <span class="keyword">new</span> <span class="predefined-type">StringBuilder</span>();
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="type">int</span> alen = a.length();
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="type">int</span> blen = b.length();
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="type">boolean</span> flag = alen &gt;= blen;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="predefined-type">String</span> longStr = flag ? a : b;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="type">int</span> longlen = longStr.length();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="type">int</span> i;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="comment">/* Add the mutual part */</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; (flag ? blen : alen); i++) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="type">int</span> aChar = a.charAt(alen - <span class="integer">1</span> - i) - <span class="integer">48</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            <span class="type">int</span> bChar = b.charAt(blen - <span class="integer">1</span> - i) - <span class="integer">48</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            <span class="type">int</span> resultChar;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            <span class="keyword">if</span> ((resultChar = aChar + bChar + carry) &gt;= <span class="integer">2</span>) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                resultChar -= <span class="integer">2</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                carry = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                carry = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            sb.insert(<span class="integer">0</span>, resultChar);
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        <span class="comment">/* Add the remaining part */</span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        <span class="keyword">for</span> (; i &lt; longlen; i++) {
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>            <span class="type">int</span> resultChar;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>            <span class="keyword">if</span> ((resultChar = longStr.charAt(longlen - <span class="integer">1</span> - i) - <span class="integer">48</span> + carry) &gt;= <span class="integer">2</span>) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                resultChar -= <span class="integer">2</span>;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                carry = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                carry = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>            }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>            sb.insert(<span class="integer">0</span>, resultChar);
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>        }
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>        <span class="comment">/* Add carry if there it's the hightes */</span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        <span class="keyword">if</span> (carry == <span class="integer">1</span>) {
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>            sb.insert(<span class="integer">0</span>, <span class="integer">1</span>);
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>        <span class="keyword">return</span> sb.toString();
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String to Integer (Atoi)]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/14/string-to-integer-atoi/"/>
    <updated>2014-07-14T17:38:56-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/14/string-to-integer-atoi</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/string-to-integer-atoi/">Question</a></p>

<hr />
<p>This question is complicated at the requirement need by <em>atoi()</em> function. At least these requirements need be met:</p>

<pre><code>* The leading invalid character(not number, + or -) could only be space
* After getting the first valid character, if there appears a invalid character, the string stops there. e.g. "123a2" will return 123.
* If string value out range of integer, return INT_MAX (2147483647) or INT_MIN (-2147483648) 
</code></pre>

<p>In my implementation, I use <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">StringBuilder</a> to store the valid string. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">int</span> atoi(<span class="predefined-type">String</span> str) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="predefined-type">StringBuilder</span> sb = <span class="keyword">new</span> <span class="predefined-type">StringBuilder</span>();
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">int</span> index = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="type">int</span> signFlag = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="type">char</span> c;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="comment">/* Truncate the leading invalid characters, get the sign of the integer */</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">while</span> (index &lt; str.length()) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            c = str.charAt(index);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            <span class="keyword">if</span> ((c &gt;= <span class="string"><span class="delimiter">'</span><span class="content">0</span><span class="delimiter">'</span></span> &amp;&amp; c &lt;= <span class="string"><span class="delimiter">'</span><span class="content">9</span><span class="delimiter">'</span></span>) || c == <span class="string"><span class="delimiter">'</span><span class="content">+</span><span class="delimiter">'</span></span> || c == <span class="string"><span class="delimiter">'</span><span class="content">-</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content">-</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                    signFlag = -<span class="integer">1</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                    index++;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                } 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content">+</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                    index++;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span>){
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                index++;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                <span class="comment">/* the invalid leading character could only be space */</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        <span class="comment">/* Get the valid string */</span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        <span class="keyword">while</span> (index &lt; str.length()) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>            c = str.charAt(index);
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>            <span class="comment">/* invalid sign */</span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>            <span class="keyword">if</span> (c &gt;= <span class="string"><span class="delimiter">'</span><span class="content">0</span><span class="delimiter">'</span></span> &amp;&amp; c &lt;= <span class="string"><span class="delimiter">'</span><span class="content">9</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                sb.append(c);
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>            }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            index++;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        }
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>        <span class="comment">/* change string to integer */</span>
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>        <span class="type">int</span> base = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        <span class="type">int</span> returnValue = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>        <span class="type">int</span> newReturnValue = returnValue;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>        <span class="keyword">if</span> (signFlag == <span class="integer">1</span>) {
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = sb.length() - <span class="integer">1</span>; i &gt;= <span class="integer">0</span>; i--) {
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>                newReturnValue = (<span class="type">int</span>) (returnValue + ((<span class="type">int</span>) (sb.charAt(i)) - <span class="integer">48</span>) * <span class="predefined-type">Math</span>.pow(<span class="integer">10</span>, base++));
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>                <span class="keyword">if</span> (newReturnValue &lt; returnValue) {
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>                    <span class="comment">/* out of the range */</span>
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>                    <span class="keyword">return</span> <span class="predefined-type">Integer</span>.MAX_VALUE;
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>                }
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>                returnValue = newReturnValue;
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>            }
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = sb.length() - <span class="integer">1</span>; i &gt;= <span class="integer">0</span>; i--) {
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>                newReturnValue = (<span class="type">int</span>) (returnValue - ((<span class="type">int</span>) (sb.charAt(i)) - <span class="integer">48</span>) * <span class="predefined-type">Math</span>.pow(<span class="integer">10</span>, base++));
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>                <span class="keyword">if</span> (newReturnValue &gt; returnValue) {
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>                    <span class="comment">/* out of the range */</span>
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>                    <span class="keyword">return</span> <span class="predefined-type">Integer</span>.MIN_VALUE;
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>                }
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>                returnValue = newReturnValue;
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>            }
<span class="line-numbers"><a href="#n66" name="n66">66</a></span>        }
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>        <span class="keyword">return</span> returnValue;
<span class="line-numbers"><a href="#n69" name="n69">69</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implement strStr()]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/14/implement-strstr/"/>
    <updated>2014-07-14T16:33:13-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/14/implement-strstr</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/implement-strstr/">Question</a></p>

<hr />
<p>We get the length of needle, traverse through haystack to get substrings with length same with needle, compare them to see if they are equal, say the substring <em>ss</em>. If so we can return the substring of haystack starting from the first index of <em>ss</em>. If no one match, we return null. The code follows below:</p>

<p>Ref:<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#substring%28int%29">String.subString</a></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> strStr(<span class="predefined-type">String</span> haystack, <span class="predefined-type">String</span> needle) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (haystack.equals(needle)) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> haystack;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="type">int</span> len = needle.length();
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; haystack.length() - len; i++) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            <span class="keyword">if</span> (haystack.substring(i, i + len).equals(needle)) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                <span class="keyword">return</span> haystack.substring(i);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Valid Palindrome]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/14/valid-palindrome/"/>
    <updated>2014-07-14T16:11:19-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/14/valid-palindrome</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/valid-palindrome/">Question</a></p>

<hr />
<p>We compare the first and last alphanumeric character, if they are not equal return false directly otherwise keep comparing until there is only one or no character left in the string. Here is the code:</p>

<p>Ref: <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isLetterOrDigit%28char%29">Character.isLetterOrDigit</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#toLowerCase%28char%29">Character.toLowerCase</a></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">boolean</span> isPalindrome(<span class="predefined-type">String</span> s) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">int</span> firstIndex = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="type">char</span> firstChar;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="type">int</span> lastIndex = s.length() - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="type">char</span> lastChar;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="keyword">while</span> (firstIndex &lt; lastIndex) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="comment">/* only alphanumeric */</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="keyword">if</span> (!<span class="predefined-type">Character</span>.isLetterOrDigit((firstChar = s.charAt(firstIndex)))) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                firstIndex++;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="keyword">if</span> (!<span class="predefined-type">Character</span>.isLetterOrDigit((lastChar = s.charAt(lastIndex)))) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                lastIndex--;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                <span class="keyword">continue</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            <span class="comment">/* Ignore Case */</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            <span class="keyword">if</span> (<span class="predefined-type">Character</span>.toLowerCase(firstChar) != <span class="predefined-type">Character</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                    .toLowerCase(lastChar)) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>            firstIndex++;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>            lastIndex--;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        <span class="keyword">return</span> <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    }
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
</feed>

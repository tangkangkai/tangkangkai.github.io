<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Creational | KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/blog/categories/creational/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-08-07T20:30:10-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[One Day One Pattern : Factory Pattern]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/28/one-day-one-pattern-factory-pattern/"/>
    <updated>2014-07-28T11:12:16-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/28/one-day-one-pattern-factory-pattern</id>
    <content type="html"><![CDATA[<ul>
  <li>Purpose:
    <ul>
      <li>Take out the responsibility of instantiation of a class from client program to the factory class. </li>
    </ul>
  </li>
  <li>Implementation Details:
    <ul>
      <li>Can apply Singleton pattern on Factory class or make the factory method static.</li>
      <li>One Super Class, which can be interface, abstract class or normal class</li>
      <li>Several sub classes extending the super class</li>
    </ul>
  </li>
  <li>Example:</li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">FactoryClass</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="directive">public</span> <span class="directive">static</span> Super getSub(<span class="predefined-type">String</span> type) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="keyword">if</span> (<span class="string"><span class="delimiter">&quot;</span><span class="content">1</span><span class="delimiter">&quot;</span></span>.equals(type)) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>            <span class="keyword">return</span> <span class="keyword">new</span> Sub1();
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        } 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="keyword">if</span> (<span class="string"><span class="delimiter">&quot;</span><span class="content">2</span><span class="delimiter">&quot;</span></span>.equals(type)) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            <span class="keyword">return</span> <span class="keyword">new</span> Sub2();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        Super sub1 = FactoryClass.getSub(<span class="string"><span class="delimiter">&quot;</span><span class="content">1</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        Super sub2 = FactoryClass.getSub(<span class="string"><span class="delimiter">&quot;</span><span class="content">2</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>}
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="directive">abstract</span> <span class="type">class</span> <span class="class">Super</span> {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span class="directive">public</span> <span class="directive">abstract</span> <span class="predefined-type">String</span> getName();
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span class="annotation">@Override</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> toString() {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">name = </span><span class="delimiter">&quot;</span></span> + <span class="local-variable">this</span>.getName();
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>}
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span class="type">class</span> <span class="class">Sub1</span> <span class="directive">extends</span> Super {
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span class="annotation">@Override</span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> getName() {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">Sub1</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    }
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>}
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>
<span class="line-numbers"><a href="#n37" name="n37">37</a></span><span class="type">class</span> <span class="class">Sub2</span> <span class="directive">extends</span> Super {
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>    <span class="annotation">@Override</span>
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>    <span class="directive">public</span> <span class="predefined-type">String</span> getName() {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>        <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">Sub2</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>    }
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>Benifits:
    <ul>
      <li>instantiate class from interface rather then implemention</li>
      <li>less coupled, easy to extend</li>
    </ul>
  </li>
  <li>For more : <a href="http://www.journaldev.com/1392/factory-design-pattern-in-java">Factory Design Pattern</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Day One Pattern : Singleton]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/15/one-day-one-pattern-singleton/"/>
    <updated>2014-07-15T09:00:14-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/15/one-day-one-pattern-singleton</id>
    <content type="html"><![CDATA[<ul>
  <li>Purpose:
    <ul>
      <li>Restrict the creations of objects. Only one instance(of the class) could be created.</li>
    </ul>
  </li>
  <li>Implementation Details:
    <ul>
      <li>Private Constructor</li>
      <li>Private static variable that is the only instance of the class.</li>
      <li>Public static method that returns the instance of the class</li>
    </ul>
  </li>
  <li>Example:</li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">SingletonClass</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>     
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="comment">/* private constructor to avoid client applications to use constructor */</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="directive">private</span> SingletonClass(){}
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="comment">/* for thread safety purpose */</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="directive">private</span> <span class="directive">static</span> <span class="type">class</span> <span class="class">SingletonHelper</span>{
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="directive">private</span> <span class="directive">static</span> <span class="directive">final</span> SingletonClass INSTANCE = <span class="keyword">new</span> SingletonClass();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="directive">public</span> <span class="directive">static</span> SingletonClass getInstance(){
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="comment">/* Lazy initialization */</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="keyword">return</span> SingletonHelper.INSTANCE;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>Further &amp; Deeper understanding : <a href="http://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-with-examples">Singleton Design Pattern</a></li>
  <li>Reference may be needed:
    <ul>
      <li><a href="http://www.programmerinterview.com/index.php/java-questions/inner-vs-nested-classes/">difference between an inner and nested class in Java</a></li>
      <li><a href="http://stackoverflow.com/questions/1353309/java-static-vs-non-static-inner-class">difference between static and non-static nested classes(inner class)</a>
        <ul>
          <li>A static nested class does not have a reference to a nesting instance, so a static nested class cannot invoke non-static methods or access non-static fields of an instance of the class within which it is nested.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>

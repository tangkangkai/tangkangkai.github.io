<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: String | KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/blog/categories/string/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-07-14T16:39:50-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implement strStr()]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/14/implement-strstr/"/>
    <updated>2014-07-14T16:33:13-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/14/implement-strstr</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/implement-strstr/">Question</a></p>

<hr />
<p>We get the length of needle, traverse through haystack to get substrings with length same with needle, compare them to see if they are equal, say the substring <em>ss</em>. If so we can return the substring of haystack starting from the first index of <em>ss</em>. If no one match, we return null. The code follows below:</p>

<p>Ref:<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#substring%28int%29">String.subString</a></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">String</span> strStr(<span class="predefined-type">String</span> haystack, <span class="predefined-type">String</span> needle) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (haystack.equals(needle)) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> haystack;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="type">int</span> len = needle.length();
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; haystack.length() - len; i++) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            <span class="keyword">if</span> (haystack.substring(i, i + len).equals(needle)) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                <span class="keyword">return</span> haystack.substring(i);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Valid Palindrome]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/14/valid-palindrome/"/>
    <updated>2014-07-14T16:11:19-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/14/valid-palindrome</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/valid-palindrome/">Question</a></p>

<hr />
<p>We compare the first and last alphanumeric character, if they are not equal return false directly otherwise keep comparing until there is only one or no character left in the string. Here is the code:</p>

<p>Ref: <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isLetterOrDigit%28char%29">Character.isLetterOrDigit</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#toLowerCase%28char%29">Character.toLowerCase</a></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">boolean</span> isPalindrome(<span class="predefined-type">String</span> s) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">int</span> firstIndex = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="type">char</span> firstChar;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="type">int</span> lastIndex = s.length() - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="type">char</span> lastChar;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="keyword">while</span> (firstIndex &lt; lastIndex) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="comment">/* only alphanumeric */</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="keyword">if</span> (!<span class="predefined-type">Character</span>.isLetterOrDigit((firstChar = s.charAt(firstIndex)))) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                firstIndex++;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="keyword">if</span> (!<span class="predefined-type">Character</span>.isLetterOrDigit((lastChar = s.charAt(lastIndex)))) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                lastIndex--;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                <span class="keyword">continue</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            <span class="comment">/* Ignore Case */</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            <span class="keyword">if</span> (<span class="predefined-type">Character</span>.toLowerCase(firstChar) != <span class="predefined-type">Character</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                    .toLowerCase(lastChar)) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>            firstIndex++;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>            lastIndex--;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        <span class="keyword">return</span> <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    }
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
</feed>

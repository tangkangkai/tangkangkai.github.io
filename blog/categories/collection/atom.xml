<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Collection | KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/blog/categories/collection/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-08-10T18:38:41-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 9]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/08/07/relearn-java-day-9/"/>
    <updated>2014-08-07T20:37:52-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/08/07/relearn-java-day-9</id>
    <content type="html"><![CDATA[<ul>
  <li>String:
    <ul>
      <li>When String object is created, it won’t be changed</li>
      <li>Construction:
        <ul>
          <li>String s = “abc”;
            <ul>
              <li>string pool, if exist, take the object directly, otherwise create a new one</li>
            </ul>
          </li>
          <li>String s = new String(“abc”);
            <ul>
              <li>created the object in Heap not in string pool</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>StringBuffer
    <ul>
      <li>length could be changed, could be changed with different string</li>
      <li>difference with StringBuilder
        <ul>
          <li>StringBuilder is faster but not support synchronization</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>transfer between primitive type and string
    <ul>
      <li>primitive type —&gt; string
        <ul>
          <li>primitive type + “”</li>
          <li>String.valueOf()</li>
        </ul>
      </li>
      <li>string —&gt; primitive type
        <ul>
          <li>Wrapper Class(say, Integer).parseInt(“”);</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<ul>
  <li>Collection:
    <ul>
      <li>store object</li>
      <li>could change the length</li>
      <li>cannot store primitive type data(arrays can)</li>
    </ul>
  </li>
  <li>Iterator:
    <ul>
      <li>implement Iterator interface</li>
      <li>a private class in concrete objects</li>
      <li>ListIterator: could change object when traverse through(general iterator cannnot)</li>
    </ul>
  </li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="predefined-type">Iterator</span> it = collecton.iterator();
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="keyword">while</span>(it.hasNext()) {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="predefined-type">System</span>.out.println(it.next());
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>List &amp; Set
    <ul>
      <li>List: has order, with index
        <ul>
          <li>Vector:
            <ul>
              <li>array, length could be changed</li>
              <li>synchronized</li>
            </ul>
          </li>
          <li>ArrayList
            <ul>
              <li>array, length could be changed</li>
              <li>not synchronized</li>
              <li>good for retrieve</li>
            </ul>
          </li>
          <li>LinkedList
            <ul>
              <li>linked list</li>
              <li>not synchronized</li>
              <li>good for add/delete</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Set: no order, without repetition
        <ul>
          <li>HashSet
            <ul>
              <li>compare according to hashCode()</li>
            </ul>
          </li>
          <li>TreeSet
            <ul>
              <li>has order
                <ul>
                  <li>1.object implements Comparable, override compareTo()</li>
                  <li>2.create comparator, implements compare(), sent it as argument to TreeSet() constructor</li>
                </ul>
              </li>
              <li>compare according to compareTo(), if return 0, regarded as the same element</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
</feed>

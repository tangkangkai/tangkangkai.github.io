<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Array | KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/blog/categories/array/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-06-27T09:42:56-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Search in Rotated Sorted Array]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/26/search-in-rotated-sorted-array/"/>
    <updated>2014-06-26T17:23:30-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/26/search-in-rotated-sorted-array</id>
    <content type="html"><![CDATA[<p>Q：Suppose a sorted array is rotated at some pivot unknown to you beforehand.You are given a target value to search. If found in the array return its index, otherwise return -1.You may assume no duplicate exists in the array.</p>

<p>Q2:Follow up for &ldquo;Search in Rotated Sorted Array&rdquo;:
What if duplicates are allowed?<br/>
Would this affect the run-time complexity? How and why?<br/>
Write a function to determine if a given target is in the array.</p>

<hr />

<p>For sorted array <strong>not rotated</strong>, we use binary search, the runtime of which would be O(logn). The basic steps would be :</p>

<blockquote><ol>
<li>Set <em>left</em> be the left most point of the array, similar to <em>right</em></li>
<li>Set <em>mid</em> to be the mid point of the array : (left + right) / 2</li>
<li>If <em>mid</em> element is equal to target, we return the index</li>
<li>Otherwise, we compare the <em>mid</em> element with target, and repeat these steps on the subtracted array (either <em>left</em> to <em>mid</em>-1 or <em>mid</em>+1 to right)。</li>
<li>If we can&rsquo;t find one before left &lt;= right, we will return -1.</li>
</ol>
</blockquote>

<p>Now the array is rotated, while when doing binary search, after <em>mid</em> divides the array into two parts, there must be one part that is in sequence. Thus we can adjust the previous solution a little bit, that is, after step 3, we figure out which part is in sequence, then we judge whether the target would reside in the part. If so, actually it becomes same with normal binary search, if not, it must reside in the other part(based on the fact that the target is in the array), then we can repeat the procedure again on the subtracted array.</p>

<p>```java Search in Sorted Array</p>

<pre><code>    while (left &lt;= right) {
        int mid = (left + right) / 2;

        if (A[mid] == target) {
            return mid;
        } else if (A[left] &lt;= A[mid]) {
            if (A[left] &lt;= target &amp;&amp; target &lt; A[mid]) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        } else {
            if (A[mid] &lt; target &amp;&amp; target &lt;= A[right]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
    }
    return -1;
</code></pre>

<p>```</p>

<p>If duplicates are allowed, we have no idea if the part is in sequence by comparing <em>left</em> and <em>mid</em>(or <em>mid</em> and <em>right</em>) as they may be the same.
Thus we need figure if target must reside in one of the two parts(to see if <em>left</em>&lt;target&lt;<em>mid</em> or <em>mid</em> &lt; target &lt; <em>right</em>), if so, we do the same previously. Otherwise, if we could not make sure either of them, we need narrow the range of left to right and repeat the procedure again. By doing so, the runtime would be O(n) in worst. Here is the detail:</p>

<p>```java Search in Sorted Array</p>

<pre><code>    while (left &lt;= right) {
        int mid = (left + right) / 2;
        if (A[mid] == target) {
            return true;
        } else {
            if (A[left] &lt; target &amp;&amp; target &lt; A[mid]) {
                right = mid - 1;
            } else if (A[mid] &lt; target &amp;&amp; target &lt; A[right]) {
                left = mid + 1;
            } else {
                if (A[left] == target) {
                    return true;
                } else {
                    left++;
                }

                if (A[right] == target) {
                    return true;
                } else {
                    right--;
                }
            }

        }
    }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Duplicates in Array]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/25/remove-duplicates-in-array/"/>
    <updated>2014-06-25T22:37:26-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/25/remove-duplicates-in-array</id>
    <content type="html"><![CDATA[<p>Q1: Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length. Do not allocate extra space for another array, you must do this in place with constant memory.</p>

<p>Q2:Follow up for &ldquo;Remove Duplicates&rdquo;: What if duplicates are allowed at most twice?</p>

<hr />

<p>If we adjust the position of every element whenever there happens a duplicate, the running time would be large. In order to be more efficient, we can do in this way: if the element is the same with the previous one, we increase a &ldquo;offset&rdquo;(recording the offset) variable by one. When traversing through every element, say index of i, we adjust the position from i to i &ndash; offset.</p>

<p>``` java Remove duplicate</p>

<pre><code>    public int removeDuplicates1(int[] A) {
    if (A == null || A.length == 0) {
        return 0;
    }

    // we use count to show the offset
    int offset = 0;

    for (int i = 1; i &lt; A.length; i++) {
        if (A[i - 1] == A[i]) {
            offset++;
        }
        A[i - offset] = A[i];

    }

    return A.length - offset;
}
</code></pre>

<p>```</p>

<p>For question 2, the solution is similar except for we need know when to increase the offset. We use a variable &ldquo;count&rdquo; to count, the following code show the details:</p>

<p>```java Remove duplicate</p>

<pre><code>public int removeDuplicates2(int[] A) {
    if (A == null || A.length == 0) {
        return 0;
    }

    int count = 0;
    int offset = 0;

    for (int i = 1; i &lt; A.length; i++) {
        if (A[i - 1] == A[i]) {
            count++;
            if (count &gt;= 2) {
                offset += 1;
            }
        } else {
            count = 0;
        }
        A[i - offset] = A[i];
    }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>

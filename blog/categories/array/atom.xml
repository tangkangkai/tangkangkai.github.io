<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Array | KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/blog/categories/array/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-07-02T17:15:02-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gas Station]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/02/gas-station/"/>
    <updated>2014-07-02T17:10:12-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/02/gas-station</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/gas-station/">Question</a></p>

<hr />
<p>For this question, not we are using a array to represent an circular route, thus we need take care of the boundary conditions: when the station is at the index of <em>gas.length - 1</em>, the next station would be at index <em>0</em> rather than <em>gas.length</em>. For every station, we check if the requirement is met, if we come back to the very first index, we successfully travel around the circuit. Below is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">int</span> canCompleteCircuit(<span class="type">int</span><span class="type">[]</span> gas, <span class="type">int</span><span class="type">[]</span> cost) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; gas.length; i++) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">if</span> (ifComplete(i, gas, cost))
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>                <span class="keyword">return</span> i;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="keyword">return</span> -<span class="integer">1</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="directive">public</span> <span class="type">boolean</span> ifComplete(<span class="type">int</span> index, <span class="type">int</span><span class="type">[]</span> gas, <span class="type">int</span><span class="type">[]</span> cost) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="type">int</span> gasNum = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="type">int</span> startingStation = index;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span class="keyword">while</span> ((gasNum = gasNum + gas[index] - cost[index]) &gt;= <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            index = index == gas.length - <span class="integer">1</span> ? <span class="integer">0</span> : ++index;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="keyword">if</span> (index == startingStation) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                <span class="keyword">return</span> <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set Matrix Zeroes]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/02/set-matrix-zeroes/"/>
    <updated>2014-07-02T16:02:01-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/02/set-matrix-zeroes</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/set-matrix-zeroes/">Question</a></p>

<hr />
<p>I firstly figure out O(m + n) solution, that is to create two HashSets, one containing the rows where exist 0 element, the other columns. Then traverse through those two sets, and set the corresponding rows and columns to 0. The code follows below:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">void</span> setZeroes(<span class="type">int</span><span class="type">[]</span><span class="type">[]</span> matrix) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="predefined-type">Set</span>&lt;<span class="predefined-type">Integer</span>&gt; zeroRow = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="predefined-type">Set</span>&lt;<span class="predefined-type">Integer</span>&gt; zeroColumn = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; matrix.length; i++) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="integer">0</span>; j &lt; matrix[<span class="integer">0</span>].length; j++) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                <span class="keyword">if</span> (matrix[i][j] == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>                    zeroRow.add(i);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                    zeroColumn.add(j);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span class="keyword">for</span> (<span class="predefined-type">Integer</span> row : zeroRow) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            setRowZero(matrix, row);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        <span class="keyword">for</span> (<span class="predefined-type">Integer</span> column : zeroColumn) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            setColumnZero(matrix, column);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        }
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span class="directive">private</span> <span class="type">void</span> setRowZero(<span class="type">int</span><span class="type">[]</span><span class="type">[]</span> matrix, <span class="type">int</span> row) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; matrix[<span class="integer">0</span>].length; i++) {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>            matrix[row][i] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span class="directive">private</span> <span class="type">void</span> setColumnZero(<span class="type">int</span><span class="type">[]</span><span class="type">[]</span> matrix, <span class="type">int</span> column) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; matrix.length; i++) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>            matrix[i][column] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>        }
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    }
</pre></div>
</div>
</div>

<p>However, as mentioned in the question, this is not the best solution. It’s able to devise a constant space solution. We can take the first row and first column in the matrix to flag. For example, if <em>matrix[i][j]</em> is 0, then we set the corresponding <em>matrix[i][0]</em> and <em>matrix[0][j]</em> as 0. Note we need to take care of these things: 1. As the first row and first column would be overwritten, we need firstly determine if there is 0 on the them before we go to flag. 2. After finishing the flag job, we are going to set zeroes, here we not only need set the rows and columns whose corresponding flag rows and columns have zeroes, but also keep the flag row and column not overwritten by 0, thus we need firstly set zeroes except for first row and column, then according to 1, at last we deal with the first row and column. The code follows below:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">void</span> setZeroes2(<span class="type">int</span><span class="type">[]</span><span class="type">[]</span> matrix) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="type">boolean</span> firstRowZero = <span class="predefined-constant">false</span>;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">boolean</span> firstColumnZero = <span class="predefined-constant">false</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="comment">/* determine if there is zero in first row and first column */</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="keyword">if</span> (matrix[<span class="integer">0</span>][<span class="integer">0</span>] == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            firstRowZero = <span class="predefined-constant">true</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            firstColumnZero = <span class="predefined-constant">true</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; matrix.length; i++) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                <span class="keyword">if</span> (matrix[i][<span class="integer">0</span>] == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                    firstColumnZero = <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; matrix[<span class="integer">0</span>].length; i++) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                <span class="keyword">if</span> (matrix[<span class="integer">0</span>][i] == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                    firstRowZero = <span class="predefined-constant">true</span>;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        }
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        <span class="comment">/* make first row and first column as the counting row and column */</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; matrix.length; i++) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="integer">1</span>; j &lt; matrix[<span class="integer">0</span>].length; j++) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>                <span class="keyword">if</span> (matrix[i][j] == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                    matrix[<span class="integer">0</span>][j] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                    matrix[i][<span class="integer">0</span>] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>                }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>            }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        }
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        <span class="comment">/* set zeroes except for first row and column */</span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; matrix.length; i++) {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>            <span class="keyword">if</span> (matrix[i][<span class="integer">0</span>] == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                setRowZero(matrix, i);
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>            }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>        }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt; matrix[<span class="integer">0</span>].length; i++) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>            <span class="keyword">if</span> (matrix[<span class="integer">0</span>][i] == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                setColumnZero(matrix, i);
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>            }
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        }
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        <span class="comment">/* set zeroes for first row and column */</span>
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>        <span class="keyword">if</span> (firstColumnZero) {
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>            setColumnZero(matrix, <span class="integer">0</span>);
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>        }
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>        <span class="keyword">if</span> (firstRowZero) {
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>            setRowZero(matrix, <span class="integer">0</span>);
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>        }
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gray Code]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/02/gray-code/"/>
    <updated>2014-07-02T15:07:43-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/02/gray-code</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/gray-code/">Question</a></p>

<hr />

<p>After seeing this question, my first thought is to try flipping each bit and compare it to the elements in the <em>returnarr</em> to see if the flipped elements exists there. If not, I’ll continue flipping the next bit. The code follows below:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">List</span>&lt;<span class="predefined-type">Integer</span>&gt; grayCode(<span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="predefined-type">List</span>&lt;<span class="predefined-type">Integer</span>&gt; codeList = <span class="keyword">new</span> <span class="predefined-type">ArrayList</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">int</span> base = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="comment">/* begin with 0 */</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        codeList.add(base);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">while</span> (codeList.size() &lt; <span class="predefined-type">Math</span>.pow(<span class="integer">2</span>, n)) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; n; i++) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                <span class="type">int</span> newBase;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                <span class="keyword">if</span> ((base &gt;&gt; i) % <span class="integer">2</span> == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                    newBase = base + (<span class="integer">1</span> &lt;&lt; i);
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                    newBase = base - (<span class="integer">1</span> &lt;&lt; i);
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                <span class="keyword">if</span> (!codeList.contains(newBase)) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                    codeList.add(newBase);
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                    base = newBase;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                    <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        <span class="keyword">return</span> codeList;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    }
</pre></div>
</div>
</div>

<p>However, this method will take at least O(n*2^n) time complexity. Thanks to <a href="http://n00tc0d3r.blogspot.com/2013/03/gray-code-and-variants.html">this website</a>, giving a O(2^n) time complexity algorithm, efficient and genius as well. The method is basically from this:
To calculate gray code sequence of 1 bit, only need to flip the last bit from 0 to 1.</p>

<pre><code>0
1
</code></pre>

<p>Move to 2 bits, as shown above, first generate a gray code sequence of 1 bit, then go backwards and flip the second bit from 0 to 1.</p>

<pre><code>00
01 ↑
---
11 ↓
10
</code></pre>

<p>Move to 3 bits, first generate a gray code sequence of 2 bits, then go backwards and flip the third bit from 0 to 1.</p>

<pre><code>000
001
011
010 ↑
-----
110 ↓
111
101
100
</code></pre>

<p>we can generate n bits gray code by generating n - 1 bits gray code firstly, and flip the highest bit from 0 to 1. Thus we can go all way down to 1 bit and start from there. The code follows below:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="predefined-type">List</span>&lt;<span class="predefined-type">Integer</span>&gt; grayCode2(<span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="predefined-type">List</span>&lt;<span class="predefined-type">Integer</span>&gt; codeList = <span class="keyword">new</span> <span class="predefined-type">ArrayList</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="comment">/* begin with 0 */</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        codeList.add(<span class="integer">0</span>);
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; n; ++i) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            <span class="keyword">for</span> (<span class="type">int</span> j = codeList.size() - <span class="integer">1</span>; j &gt;= <span class="integer">0</span>; j--) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>                codeList.add(codeList.get(j) | <span class="integer">1</span> &lt;&lt; i);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="keyword">return</span> codeList;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Climbing Stairs]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/01/climbing-stairs/"/>
    <updated>2014-07-01T23:11:20-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/01/climbing-stairs</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/climbing-stairs/">Question</a></p>

<hr />
<p>We can solve this question by taking advantage of <a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci number</a>. To get the distinct ways to climb n steps, we can separate it into two parts, first taking one step, then the ways is the same with <em>climeStair(n - 1)</em>; Second taking two steps, then the the ways is the same with <em>climeStair(n - 2)</em>. In total, <em>climeStair(n)</em> = <em>climeStair(n - 1)</em> + <em>climeStair(n - 2)</em>, which is actually to find the _n_th Fibonacci number. The code follows here:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">int</span> climbStairs(<span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (n &lt;= <span class="integer">2</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> n;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="type">int</span><span class="type">[]</span> steps = <span class="keyword">new</span> <span class="type">int</span>[n + <span class="integer">1</span>];
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        steps[<span class="integer">1</span>] = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        steps[<span class="integer">2</span>] = <span class="integer">2</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="integer">3</span>; i &lt;= n; i++) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            steps[i] = steps[i - <span class="integer">1</span>] + steps[i - <span class="integer">2</span>];
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="keyword">return</span> steps[n];
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plus One]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/01/plus-one/"/>
    <updated>2014-07-01T16:30:34-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/01/plus-one</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/plus-one/">Question</a></p>

<hr />
<p>For this question, I take advantage of a helper function <em>plusOneHelper</em>, which will add one to the <em>end</em> element of array <em>digit</em>, if the result is smaller than 10, we can return. If not, we set the digit on that index 0 and recursively call this helper function on the array from start to <em>end</em>-1. After running this helper function, we determine if the first element of the array is 0, if not we return the original array. Otherwise, we create a new array <em>newDigit</em>, starting with 1, and copy the rest from <em>digits</em>. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">int</span><span class="type">[]</span> plusOne(<span class="type">int</span><span class="type">[]</span> digits) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        plusOneHelper(digits, <span class="integer">0</span>, digits.length - <span class="integer">1</span>);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="keyword">if</span> (digits[<span class="integer">0</span>] == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>            <span class="type">int</span><span class="type">[]</span> newDigit = <span class="keyword">new</span> <span class="type">int</span>[digits.length + <span class="integer">1</span>];
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            newDigit[<span class="integer">0</span>] = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; digits.length; i++) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>                newDigit[i + <span class="integer">1</span>] = digits[i];
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="keyword">return</span> newDigit;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        <span class="keyword">return</span> digits;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="directive">private</span> <span class="type">void</span> plusOneHelper(<span class="type">int</span><span class="type">[]</span> digits, <span class="type">int</span> start, <span class="type">int</span> end) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        <span class="keyword">if</span> (end &lt; start) {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        <span class="type">int</span> base = digits[end];
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        base += <span class="integer">1</span>;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        <span class="keyword">if</span> (base &lt; <span class="integer">10</span>) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            digits[end] = base;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>            digits[end] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>            plusOneHelper(digits, start, end - <span class="integer">1</span>);
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-06-28T12:00:14-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 3]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/28/relearn-java-day-3/"/>
    <updated>2014-06-28T07:31:57-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/28/relearn-java-day-3</id>
    <content type="html"><![CDATA[<p>1.<strong>Arrays</strong>：</p>

<ul>
<li>initialization:

<ul>
<li>int[] arr = new int[5]; //the default value would be 0(default value of int)</li>
<li>int[] arr = new int[]{1, 2, 3, 4, 5};</li>
<li>int[] arr = {1, 2, 3, 4, 5};</li>
</ul>
</li>
<li><p>sort:</p>

<ul>
<li>Arrays.sort([]);</li>
</ul>
</li>
<li><p>BinarySearch:</p>

<ul>
<li>Arrays.binarySearch(arr,key);//如果存在返回的具体的角标位置，不存在返回的是  -插入点-1 <br/>
```java example</li>
</ul>
</li>
</ul>


<p>public static int halfSearch_2(int[] arr,int key)</p>

<pre><code>{
    int max,min,mid;
    min = 0;
    max = arr.length-1;

    while(min&lt;=max)
    {
        mid = (max+min)&gt;&gt;1;

        if(key&gt;arr[mid])
            min = mid + 1;
        else if(key&lt;arr[mid])
            max = mid - 1;
        else
            return mid;
    }
    return -1;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 2]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/27/relearn-java-day-2/"/>
    <updated>2014-06-27T08:35:05-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/27/relearn-java-day-2</id>
    <content type="html"><![CDATA[<p>1.<strong>Break</strong>:</p>

<ul>
<li>jump out of only : <strong>switch</strong>, loop</li>
<li>break designated loop : break + 标号</li>
</ul>


<p>``` java Example</p>

<pre><code>loopoint:for (int x = 0; x &lt; 3; x++) {
    for(int y = 0; y &lt; 3; y++) {
        System.out.println(y);
        break loopoint;
    }   
}
</code></pre>

<p>```</p>

<p>2.<strong>Overload</strong>:</p>

<blockquote><ol>
<li>同一个类，</li>
<li>同名。</li>
<li>参数个数不同。or 参数类型不同。</li>
<li>函数重载和返回值类型无关。</li>
<li>java是严谨性语言，如果函数出现的调用的不确定性，会编译失败。</li>
</ol>
</blockquote>

<p>3.<strong>Division of JVM</strong>:</p>

<blockquote><ol>
<li>寄存器。</li>
<li>本地方法区。<br/>
 和所在系统有关</li>
<li>方法区。</li>
<li>栈内存（Stack）。<br/>
 存储的都是局部变量。<br/>
 而且变量所属的作用域一旦结束，该变量就自动释放。
 特点：生命周期短，处理速度快</li>
<li>堆内存(Heap)。<br/>
 存储是数组和对象(其实数组就是对象) 凡是new建立在堆中。<br/>
 特点：

<ol>
<li>每一个实体都有首地址值。</li>
<li>堆内存中的每一个变量都有默认初始化值，根据类型的不同而不同。整数是0，小数0.0或者0.0f，boolean false char &lsquo;\u0000&rsquo;</li>
<li>垃圾回收机制。</li>
</ol>
</li>
</ol>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 1]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/26/relearn-java-day-1/"/>
    <updated>2014-06-26T07:53:35-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/26/relearn-java-day-1</id>
    <content type="html"><![CDATA[<p>The foundation is so important for a skyscraper, thus I want to rebuild, or, renovate of my java foundation in the next few weeks. I will post valuable points here in this <em>relearn java</em> series. Here is Day 1:</p>

<ol>
<li>Basic Conceptions:

<ul>
<li><strong>Java Virtual Machine(JVM)</strong>:

<ul>
<li>help Java become cross-platform language(note jvm isn&rsquo;t cross-platform)</li>
<li>between language and operating system</li>
</ul>
</li>
<li><strong>Java Runtime Environment(JRE)</strong>

<ul>
<li>JVM + 核心类库</li>
</ul>
</li>
<li><strong>Java Development Kit(JDK)</strong>

<ul>
<li>JRE + javac.exe + jar.exe + &hellip;</li>
</ul>
</li>
</ul>
</li>
<li><p>Comment</p>

<ul>
<li>one line : //</li>
<li>multiple line: /<em>  </em>/</li>
<li>文档注释： /<em>* </em>/</li>
</ul>
</li>
<li><p>Bit computing</p>

<ul>
<li>&amp; and. could used to get several bits of bytes.

<ul>
<li>not the difference between &amp; and &amp;&amp; is &amp;&amp; is more efficient when the left of &amp;&amp; is false(it will stop calculating the right one).</li>
</ul>
</li>
<li>^ xor. note you can get the original number by xor two times

<ul>
<li>change the value of variable a, b in place :<br/>
  a = a ^ b;
  b = a ^ b;
  a = a ^ b;</li>
</ul>
</li>
<li><strong>&lt;&lt;</strong> 左移 （该数乘以2的几次方）</li>
<li><strong>>></strong> 右移 （该数除以2的几次方）对于高位出现的空位， 补与原来相同的数</li>
<li><strong>>>></strong> 无论原来高位是什么 都用0来补</li>
</ul>
</li>
<li><p>switch :</p>

<ul>
<li>the types that could be compared ： byte, short, int, char</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-07-01T23:35:31-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 4 OOP]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/29/relearn-java-day-4/"/>
    <updated>2014-06-29T07:33:54-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/29/relearn-java-day-4</id>
    <content type="html"><![CDATA[<ul>
  <li><strong>Encapsulation</strong>
    <ul>
      <li>hide details, including private the member variable.(set(), get())</li>
      <li>class, framework are also encapsulation </li>
    </ul>
  </li>
  <li><strong>Anonymous object</strong>
    <ul>
      <li>new Car();</li>
      <li>when member functions only called once, we can use anonymous object</li>
      <li>can be regarded as function arguments.</li>
    </ul>
  </li>
  <li><strong>Member variable</strong>:
    <ul>
      <li>when object created, the corresponding member variables are initialized with default value (as the object is created in heap)</li>
      <li>
        <p>the difference between member variable and local variable:  </p>

        <ul>
          <li>member variable is defined in the block of class, can be visited through the class. local variable is defined in the block of function.  </li>
          <li>member variable is created in heap, while local variable in stack.  </li>
          <li>member variable exists with class, local variable exists with it’s corresponding blcok(functions).  </li>
          <li>member variable has default value, local variable doesn’t</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Constructor</strong>
    <ul>
      <li>when newed, constructor functions must be called</li>
      <li>no return value, name is the same with the class.</li>
      <li>if not defined, there would be a default constructor function. If defined, the default one not used.</li>
      <li>could be overloaded</li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 3 Arrays]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/28/relearn-java-day-3/"/>
    <updated>2014-06-28T07:31:57-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/28/relearn-java-day-3</id>
    <content type="html"><![CDATA[<p><strong>Arrays</strong>： </p>

<ul>
  <li>initialization:
    <ul>
      <li>int[] arr = new int[5]; //the default value would be 0(default value of int)  </li>
      <li>int[] arr = new int[]{1, 2, 3, 4, 5};  </li>
      <li>int[] arr = {1, 2, 3, 4, 5};</li>
    </ul>
  </li>
  <li>
    <p>sort:</p>

    <ul>
      <li>Arrays.sort([]);  </li>
    </ul>
  </li>
  <li>
    <p>BinarySearch: </p>

    <ul>
      <li>Arrays.binarySearch(arr,key);//如果存在返回的具体的角标位置，不存在返回的是  -插入点-1   </li>
    </ul>
  </li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="directive">static</span> <span class="type">int</span> halfSearch_2(<span class="type">int</span><span class="type">[]</span> arr,<span class="type">int</span> key)
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="type">int</span> max,min,mid;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        min = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        max = arr.length-<span class="integer">1</span>;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="keyword">while</span>(min&lt;=max)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            mid = (max+min)&gt;&gt;<span class="integer">1</span>;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="keyword">if</span>(key&gt;arr[mid])
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                min = mid + <span class="integer">1</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;arr[mid])
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                max = mid - <span class="integer">1</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            <span class="keyword">else</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                <span class="keyword">return</span> mid;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        <span class="keyword">return</span> -<span class="integer">1</span>;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    }
</pre></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 2]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/27/relearn-java-day-2/"/>
    <updated>2014-06-27T08:35:05-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/27/relearn-java-day-2</id>
    <content type="html"><![CDATA[<p>1.<strong>Break</strong>:</p>

<ul>
  <li>jump out of only : <strong>switch</strong>, loop </li>
  <li>break designated loop : break + 标号</li>
</ul>

<p>``` java Example</p>

<pre><code>loopoint:for (int x = 0; x &lt; 3; x++) {
	for(int y = 0; y &lt; 3; y++) {
		System.out.println(y);
		break loopoint;
	}	
}
</code></pre>

<p>```</p>

<p>2.<strong>Overload</strong>:<br />
&gt;
1. 同一个类，<br />
2. 同名。<br />
3. 参数个数不同。or 参数类型不同。<br />
4. 函数重载和返回值类型无关。<br />
5. java是严谨性语言，如果函数出现的调用的不确定性，会编译失败。 </p>

<p>3.<strong>Division of JVM</strong>:<br />
&gt;	
1. 寄存器。<br />
2. 本地方法区。<br />
	和所在系统有关
3. 方法区。<br />
4. 栈内存（Stack）。<br />
	存储的都是局部变量。<br />
	而且变量所属的作用域一旦结束，该变量就自动释放。 
	特点：生命周期短，处理速度快 
5. 堆内存(Heap)。<br />
	存储是数组和对象(其实数组就是对象) 凡是new建立在堆中。<br />
	特点：<br />
	1. 每一个实体都有首地址值。<br />
	2. 堆内存中的每一个变量都有默认初始化值，根据类型的不同而不同。整数是0，小数0.0或者0.0f，boolean false char ‘\u0000’<br />
	3. 垃圾回收机制。      </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 1]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/26/relearn-java-day-1/"/>
    <updated>2014-06-26T07:53:35-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/26/relearn-java-day-1</id>
    <content type="html"><![CDATA[<p>The foundation is so important for a skyscraper, thus I want to rebuild, or, renovate of my java foundation in the next few weeks. I will post valuable points here in this <em>relearn java</em> series. Here is Day 1:</p>

<ol>
  <li>Basic Conceptions:<br />
    <ul>
      <li><strong>Java Virtual Machine(JVM)</strong>:  <br />
        <ul>
          <li>help Java become cross-platform language(note jvm isn’t cross-platform)</li>
          <li>between language and operating system</li>
        </ul>
      </li>
      <li><strong>Java Runtime Environment(JRE)</strong>
        <ul>
          <li>JVM + 核心类库</li>
        </ul>
      </li>
      <li><strong>Java Development Kit(JDK)</strong>
        <ul>
          <li>JRE + javac.exe + jar.exe + …</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Comment
    <ul>
      <li>one line : //</li>
      <li>multiple line: /*  */</li>
      <li>文档注释： /** */</li>
    </ul>
  </li>
  <li>Bit computing
    <ul>
      <li>&amp; and. could used to get several bits of bytes.
        <ul>
          <li>not the difference between &amp; and &amp;&amp; is &amp;&amp; is more efficient when the left of &amp;&amp; is false(it will stop calculating the right one).</li>
        </ul>
      </li>
      <li>^ xor. note you can get the original number by xor two times
        <ul>
          <li>change the value of variable a, b in place :<br />
  a = a ^ b;
  b = a ^ b;
  a = a ^ b;</li>
        </ul>
      </li>
      <li><strong>«</strong> 左移 （该数乘以2的几次方）</li>
      <li><strong>»</strong> 右移 （该数除以2的几次方）对于高位出现的空位， 补与原来相同的数</li>
      <li><strong>»&gt;</strong> 无论原来高位是什么 都用0来补</li>
    </ul>
  </li>
  <li>switch : 
    <ul>
      <li>the types that could be compared ： byte, short, int, char</li>
    </ul>
  </li>
</ol>
]]></content>
  </entry>
  
</feed>

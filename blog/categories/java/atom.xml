<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-08-10T18:38:41-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 10]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/08/09/relearn-java-day-10/"/>
    <updated>2014-08-09T09:07:19-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/08/09/relearn-java-day-10</id>
    <content type="html"><![CDATA[<ul>
  <li>Map:
    <ul>
      <li>key-value pairs</li>
      <li>HashTable
        <ul>
          <li>synchronized</li>
          <li>no null key or value</li>
        </ul>
      </li>
      <li>HashMap
        <ul>
          <li>data structure same with HashTable, not synchronized</li>
          <li>could have null key and value</li>
        </ul>
      </li>
      <li>TreeMap
        <ul>
          <li>data structure : binary tree</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<ul>
  <li>Generics
    <ul>
      <li>
        <type variable=""> no primitive type
</type>
      </li>
      <li>Benefit:
        <ul>
          <li>runtime issue -&gt; compile time</li>
          <li>avoid casting </li>
        </ul>
      </li>
      <li>when in runtime, no generics
        <ul>
          <li>in .class file, generics would be erased </li>
        </ul>
      </li>
      <li>could be defined both on class and method:
        <ul>
          <li>class: class GenericTest<t> {}</t></li>
          <li>public <t> void show(T t){}</t></li>
          <li>for static method, cannot access generics on class, only can access generics on method:
            <ul>
              <li>public static <t> void show(T t) {}</t></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Generics interface</li>
      <li>wildcard chracter:
        <ul>
          <li>&lt;? extends E&gt; : E or E’s subclasses</li>
          <li>&lt;? super E&gt; : E or E’s superclasses </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 9]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/08/07/relearn-java-day-9/"/>
    <updated>2014-08-07T20:37:52-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/08/07/relearn-java-day-9</id>
    <content type="html"><![CDATA[<ul>
  <li>String:
    <ul>
      <li>When String object is created, it won’t be changed</li>
      <li>Construction:
        <ul>
          <li>String s = “abc”;
            <ul>
              <li>string pool, if exist, take the object directly, otherwise create a new one</li>
            </ul>
          </li>
          <li>String s = new String(“abc”);
            <ul>
              <li>created the object in Heap not in string pool</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>StringBuffer
    <ul>
      <li>length could be changed, could be changed with different string</li>
      <li>difference with StringBuilder
        <ul>
          <li>StringBuilder is faster but not support synchronization</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>transfer between primitive type and string
    <ul>
      <li>primitive type —&gt; string
        <ul>
          <li>primitive type + “”</li>
          <li>String.valueOf()</li>
        </ul>
      </li>
      <li>string —&gt; primitive type
        <ul>
          <li>Wrapper Class(say, Integer).parseInt(“”);</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<ul>
  <li>Collection:
    <ul>
      <li>store object</li>
      <li>could change the length</li>
      <li>cannot store primitive type data(arrays can)</li>
    </ul>
  </li>
  <li>Iterator:
    <ul>
      <li>implement Iterator interface</li>
      <li>a private class in concrete objects</li>
      <li>ListIterator: could change object when traverse through(general iterator cannnot)</li>
    </ul>
  </li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="predefined-type">Iterator</span> it = collecton.iterator();
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="keyword">while</span>(it.hasNext()) {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="predefined-type">System</span>.out.println(it.next());
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>List &amp; Set
    <ul>
      <li>List: has order, with index
        <ul>
          <li>Vector:
            <ul>
              <li>array, length could be changed</li>
              <li>synchronized</li>
            </ul>
          </li>
          <li>ArrayList
            <ul>
              <li>array, length could be changed</li>
              <li>not synchronized</li>
              <li>good for retrieve</li>
            </ul>
          </li>
          <li>LinkedList
            <ul>
              <li>linked list</li>
              <li>not synchronized</li>
              <li>good for add/delete</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Set: no order, without repetition
        <ul>
          <li>HashSet
            <ul>
              <li>compare according to hashCode()</li>
            </ul>
          </li>
          <li>TreeSet
            <ul>
              <li>has order
                <ul>
                  <li>1.object implements Comparable, override compareTo()</li>
                  <li>2.create comparator, implements compare(), sent it as argument to TreeSet() constructor</li>
                </ul>
              </li>
              <li>compare according to compareTo(), if return 0, regarded as the same element</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 8]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/08/05/relearn-java-day-8/"/>
    <updated>2014-08-05T09:12:55-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/08/05/relearn-java-day-8</id>
    <content type="html"><![CDATA[<ul>
  <li>
    <p>Thread : a thread of execution is the smallest sequence of programmed instructions that can be managed independently by a scheduler</p>
  </li>
  <li>Thread creation:
    <ul>
      <li>1.extends Thread class
        <ul>
          <li>create a class, extends Thread class</li>
          <li>override run method</li>
          <li>create thread instance </li>
          <li>call start() method to start a thread, which will call run</li>
        </ul>
      </li>
      <li>2.implements 	Runnable (normally used)
        <ul>
          <li>create a class, implements Runnable interface</li>
          <li>override run method</li>
          <li>create Thread instance with Runnable instance as argument</li>
          <li>call start() method to start </li>
          <li>benefit:
            <ul>
              <li>multiple inheritance</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Thread state: <a href="http://www.uml-diagrams.org/examples/java-6-thread-state-machine-diagram-example.html">Click Here</a></p>
  </li>
  <li>Thread Safety
    <ul>
      <li>Unsafety Reason:
        <ul>
          <li>shared data</li>
          <li>multiple thread operate on the shared data</li>
        </ul>
      </li>
      <li>How to deal with:
        <ul>
          <li>synchronized
            <ul>
              <li>synchornized block 
                <ul>
                  <li>synchornized(lock obj){}</li>
                </ul>
              </li>
              <li>synchornized method
                <ul>
                  <li>public synchronized void func()</li>
                  <li>lock of synchronized method:
                    <ul>
                      <li>this</li>
                      <li>static synchronized method:
                        <ul>
                          <li>this.getClass()</li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                  <li>difference with synchronized block:
                    <ul>
                      <li>lock is different</li>
                      <li></li>
                    </ul>
                  </li>
                </ul>
              </li>
              <li>good and bad:
                <ul>
                  <li>good: solve synchronization problem</li>
                  <li>bad : decrease efficiency</li>
                </ul>
              </li>
              <li>precondition:
                <ul>
                  <li>multiple thread with one lock</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Deadlock</li>
    </ul>
  </li>
  <li>Communication between Threads:
      * shared data, different tasks
      * wait() &amp; notify()/notifyAll():
          * according to the related lock
              * lock.wait() &amp; lock.notify()/notifyAll()</li>
  <li>Lock &amp; Condition:<strong>java.util.concurrent.lock</strong>
    <ul>
      <li>replace synchronized &amp; Object monitor method</li>
      <li>encapsulate the lock to an object
        <ul>
          <li>Lock lock = new ReentrantLock(); lock.lock(); lock.unlock();</li>
          <li>normally put unlock in <strong>finally</strong> block</li>
        </ul>
      </li>
      <li>Condition:
        <ul>
          <li>Condition factors out the Object monitor methods (wait, notify and notifyAll) into distinct objects </li>
          <li>A Condition instance is intrinsically bound to a lock. To obtain a Condition instance for a particular Lock instance use its newCondition() method. </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 7]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/25/relearn-java-day-7/"/>
    <updated>2014-07-25T08:31:36-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/25/relearn-java-day-7</id>
    <content type="html"><![CDATA[<ul>
  <li>exception:
    <ul>
      <li>using class to describe bad situations</li>
      <li>Throwable
        <ul>
          <li>Error:cannot handle, throwed by jvm</li>
          <li>Exception:can handle
            <ul>
              <li>RuntimeException, check when running</li>
              <li>OtherException, check when compiling</li>
            </ul>
          </li>
          <li>throw the throwable object let caller know</li>
        </ul>
      </li>
      <li>Self-defined exception class</li>
    </ul>
  </li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="predefined-type">Class</span> MyException <span class="directive">extends</span> <span class="exception">Exception</span> {}
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="directive">public</span> <span class="type">void</span> testException <span class="directive">throws</span> MyException {
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    <span class="keyword">throw</span> <span class="keyword">new</span> MyException();
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>throw &amp; throws:
    <ul>
      <li>throws: declare on function, throws one or more Exception</li>
      <li>throw: declare in function, throw an object</li>
    </ul>
  </li>
  <li>finally:
    <ul>
      <li>always executed except for System.exit()</li>
      <li>format
        <ul>
          <li>try catch finally</li>
          <li>try catch</li>
          <li>try finally , release resource but throws exception</li>
        </ul>
      </li>
      <li>normally used to release resource</li>
    </ul>
  </li>
  <li>principles:
    <ul>
      <li>if exception(need check when compile) throwed inside function, need throws it on function </li>
      <li>caller need catch or throws this exception
        <ul>
          <li>if could be solved, use catch</li>
          <li>if cannot be solved, use throws</li>
        </ul>
      </li>
      <li>multiple exceptions corresponds to multiple catches</li>
      <li>for inheritance, override a method: child class can only throw the father’s exception or the exceptions’ child class or its subset. If father did not throws any exception, child cannot throw exception.</li>
    </ul>
  </li>
</ul>

<hr />
<ul>
  <li>Object
    <ul>
      <li>boolean equals(Obj o): can be override and used for compare objects</li>
      <li>int hashCode(): modified if equals() is override</li>
      <li>toString():what will be printed by System.out.print</li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day 6]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/24/relearn-java-day-6/"/>
    <updated>2014-07-24T08:14:42-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/24/relearn-java-day-6</id>
    <content type="html"><![CDATA[<ul>
  <li>interface
    <ul>
      <li>all methods are abstract : public abstract</li>
      <li>global variable : public static final</li>
      <li>class <em>implements</em> interface : multi implements</li>
      <li>interface <em>extends</em> interface : multi extends</li>
      <li>loose coupling </li>
    </ul>
  </li>
  <li>poymorphism:
    <ul>
      <li>one object, two form</li>
      <li>Father class/interface reference points to child class</li>
      <li>increase the expandability</li>
      <li>premise:
        <ul>
          <li>inheritance</li>
          <li>overide</li>
        </ul>
      </li>
      <li>Casting:
        <ul>
          <li>upcasting Animal a = new Cat();</li>
          <li>downcasting Cat c = (Cat)a;
            <ul>
              <li>use instance of to determine the child class:
  if (a instance of Cat)</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>member :
        <ul>
          <li>member variable:
            <ul>
              <li>compile &amp; run : refer to the <strong>reference type</strong> variable</li>
            </ul>
          </li>
          <li>member function:
            <ul>
              <li>compile : refer to the <strong>reference type</strong> function</li>
              <li>run : refer to <strong>actual type</strong> function</li>
            </ul>
          </li>
          <li>static function: no need for binded object
            <ul>
              <li>compile &amp; run : refer to the reference type variable</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>inner class
    <ul>
      <li>inner class can directly access the members in outer class
        <ul>
          <li>it has the reference to the Outer Class : Outer.this</li>
        </ul>
      </li>
      <li>outer class need object of inner class to access the members in it</li>
      <li>other class access inner class:
        <ul>
          <li>Outer.Inner in = new Outer().new Inner();// not static</li>
          <li>Outer.Inner in = new Outer.Inner(); //Outer static</li>
          <li>Outer.Inner.func() // both Outer and Inner are static</li>
          <li>while for most time, inner class is <strong>private</strong></li>
        </ul>
      </li>
      <li>local inner class:
        <ul>
          <li>can only access local members which is final</li>
        </ul>
      </li>
      <li>anonymous inner class:
        <ul>
          <li>premise: inner class extends or implements a outer class or interface</li>
          <li>actually anonymous child class</li>
          <li>new Father Class/Interface() {}.function()</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
</feed>

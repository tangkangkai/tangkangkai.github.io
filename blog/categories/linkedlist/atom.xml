<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linkedlist | KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/blog/categories/linkedlist/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-08-27T22:43:14-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swap Nodes in Pairs]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/13/swap-nodes-in-pairs/"/>
    <updated>2014-07-13T22:05:48-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/13/swap-nodes-in-pairs</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/swap-nodes-in-pairs/">Question</a></p>

<hr />
<p>For this question, we can firstly swap the first and second node, then point the second node to the result of calling function(recursively) on the third node. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode swapPairs(ListNode head) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span> || head.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode headNode = head.next;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ListNode thirdNode = headNode.next;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        headNode.next = head;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        head.next = swapPairs(thirdNode);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">return</span> headNode;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Nth Node From End of List]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/13/remove-nth-node-from-end-of-list/"/>
    <updated>2014-07-13T21:37:56-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/13/remove-nth-node-from-end-of-list</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/remove-nth-node-from-end-of-list/">Question</a></p>

<hr />
<p>We need two pointers, first(<em>beforeRemovedNode</em> in the code) pointing to the head node, the next(<em>pointNode</em> in the code) pointing to the node <em>n</em> positions after head node. Then we move both pointer to its <em>next</em> position in the same time until the pointNodeâ€™s <em>next</em> is null. The we can remove the node just after <em>beforeRemovedNode</em> by doing </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>beforeRemoveNode.next = beforeRemoveNode.next.next;
</pre></div>
</div>
</div>

<p>Below is the whole code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode removeNthFromEnd(ListNode head, <span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="comment">/* beforeRemovedNode point to the head first</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="comment">         * pointNode point to the node n positions after beforeRemovedNode</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="comment">         */</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        ListNode pointNode = head;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        ListNode beforeRemoveNode = head;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="type">int</span> index = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="keyword">while</span> (index &lt;= n) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="keyword">if</span> (pointNode.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                <span class="keyword">return</span> head.next;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            pointNode = pointNode.next;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            index++;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        <span class="keyword">while</span>(pointNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            beforeRemoveNode = beforeRemoveNode.next;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            pointNode = pointNode.next;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        beforeRemoveNode.next = beforeRemoveNode.next.next;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        <span class="keyword">return</span> head;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rotate List]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/11/rotate-list/"/>
    <updated>2014-07-11T17:05:14-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/11/rotate-list</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/rotate-list/">Question</a></p>

<hr />
<p>For this question, note when n is larger than the length of the list, we need do the mod operation to get the remainder. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> ListNode rotateRight(ListNode head, <span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="type">int</span> len = getLength(head);
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span> || n == <span class="integer">0</span> || n % len == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="type">int</span> rotateIndex = len - n % len;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="type">int</span> index = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="comment">/* Find where to start rotate */</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        ListNode pointNode = head;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">while</span> (index &lt; rotateIndex) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            pointNode = pointNode.next;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            index++;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        ListNode startRotateNode = pointNode.next;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        pointNode.next = <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        <span class="comment">/* rotate, point the node before startRotateNode to null</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="comment">           point the last node in the rotated list to the head</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="comment">           return startRotateNode</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="comment">        */</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        ListNode rotateNode = startRotateNode;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        <span class="keyword">while</span>(rotateNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            rotateNode = rotateNode.next;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        rotateNode.next = head;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        <span class="keyword">return</span> startRotateNode;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    }
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    <span class="directive">public</span> <span class="type">int</span> getLength(ListNode head) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>        <span class="type">int</span> k = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>        <span class="keyword">while</span> (head != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>            head = head.next;
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            k++;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        }
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>        <span class="keyword">return</span> k;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Partition List]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/10/partition-list/"/>
    <updated>2014-07-10T21:46:09-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/10/partition-list</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/partition-list/">Question</a></p>

<hr />
<p>First, we need to find the first node whose <em>next</em> nodeâ€™s value is not smaller than 3, which means the nodes before (and it self)this say,  <em>pivot node</em>, do not need to change. Next we traverse to see which node is smaller than <em>x</em>, put it after <em>pivot node</em>. Also note the special case where the head nodeâ€™s value is larger than <em>x</em>, then the <em>pivot node</em> would be assigned later. Here is the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> ListNode partition(ListNode head, <span class="type">int</span> x) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode pointNode = head;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ListNode pivotNode;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="comment">/* Find the pivot node */</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="keyword">if</span> (head.val &lt; x) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="keyword">while</span> (pointNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                <span class="keyword">if</span> (pointNode.next.val &lt; x) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                    pointNode = pointNode.next;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                    <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            pivotNode = pointNode;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        } <span class="keyword">else</span> { <span class="comment">// if the head node's value is larger than x, then pivotNode is null</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            pivotNode = <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        <span class="comment">/* Traverse */</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        <span class="keyword">while</span> (pointNode.next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            <span class="keyword">if</span> (pointNode.next.val &lt; x) {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                ListNode temp = pointNode.next;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>                pointNode.next = pointNode.next.next;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>                <span class="keyword">if</span> (pivotNode != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                    temp.next = pivotNode.next;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                    pivotNode.next = temp;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                    pivotNode = temp;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                    pivotNode = temp;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                    temp.next = head;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>                    head = temp;
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>                }
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                pointNode = pointNode.next;
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>            }
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        }
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        <span class="keyword">return</span> head;
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse Linked List II]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/10/reverse-linked-list-ii/"/>
    <updated>2014-07-10T15:48:08-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/10/reverse-linked-list-ii</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/reverse-linked-list-ii/">Question</a></p>

<hr />
<p>We need to take care of a situation when <em>m</em> equals to one, since it affects what we return. If <em>m=1</em>, then we return the last element in the list part that need reversed, otherwise we return the original head. </p>

<p>For the reverse operation, itâ€™s helpful to know how to just simply reverse a linkedlist. Note we not only need to point node to its previous node, but also record the real next node. Therefore we need three pointers: <em>prev, curr, next</em>. Here is the code </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode reverseLinkedList(ListNode head) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="keyword">if</span> (head == <span class="predefined-constant">null</span> || head.next == <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="keyword">return</span> head;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode prev = head;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ListNode curr = head;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        ListNode next = head.next;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        head.next = <span class="predefined-constant">null</span>;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="keyword">while</span> (next != <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            curr = next;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            next = next.next;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            curr.next = prev;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            prev = curr;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        <span class="keyword">return</span> curr;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
</pre></div>
</div>
</div>

<p>With the help of this basic operation we can move to solve our original question. Here is the code </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> ListNode reverseBetween(ListNode head, <span class="type">int</span> m, <span class="type">int</span> n) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="type">int</span> index = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        ListNode pointNode;<span class="comment">// node used to traverse the list</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        ListNode listPrev; <span class="comment">// record the node before the reversed list part</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        ListNode listHead; <span class="comment">// record the head of the reversed list part</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        pointNode = head;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="keyword">while</span> (index + <span class="integer">1</span> &lt; m) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            pointNode = pointNode.next;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            index++;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        listPrev = pointNode;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        listHead = m == <span class="integer">1</span>? head : pointNode.next;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        ListNode prev = pointNode;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        ListNode curr = pointNode;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        ListNode next = pointNode.next;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        <span class="keyword">while</span> (index &lt; n) {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            curr = next;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>            next = next.next;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            curr.next = prev;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            prev = curr;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            index++;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        listHead.next = next;
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        <span class="keyword">if</span> (m == <span class="integer">1</span>) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>            <span class="keyword">return</span> curr;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>            listPrev.next = curr;
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>            <span class="keyword">return</span> head;    
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>        }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
</feed>

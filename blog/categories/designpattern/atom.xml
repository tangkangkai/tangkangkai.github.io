<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Designpattern | KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/blog/categories/designpattern/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-07-25T09:09:30-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[One Day One Pattern : Singleton]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/07/15/one-day-one-pattern-singleton/"/>
    <updated>2014-07-15T09:00:14-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/07/15/one-day-one-pattern-singleton</id>
    <content type="html"><![CDATA[<ul>
  <li>Purpose:
    <ul>
      <li>Restrict the creations of objects. Only one instance(of the class) could be created.</li>
    </ul>
  </li>
  <li>Implementation Details:
    <ul>
      <li>Private Constructor</li>
      <li>Private static variable that is the only instance of the class.</li>
      <li>Public static method that returns the instance of the class</li>
    </ul>
  </li>
  <li>Example:</li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">SingletonClass</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>     
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="comment">/* private constructor to avoid client applications to use constructor */</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="directive">private</span> SingletonClass(){}
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="comment">/* for thread safety purpose */</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="directive">private</span> <span class="directive">static</span> <span class="type">class</span> <span class="class">SingletonHelper</span>{
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="directive">private</span> <span class="directive">static</span> <span class="directive">final</span> SingletonClass INSTANCE = <span class="keyword">new</span> SingletonClass();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="directive">public</span> <span class="directive">static</span> SingletonClass getInstance(){
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="comment">/* Lazy initialization */</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="keyword">return</span> SingletonHelper.INSTANCE;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>Further &amp; Deeper understanding : <a href="http://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-with-examples">Singleton Design Pattern</a></li>
  <li>Reference may be needed:
    <ul>
      <li><a href="http://www.programmerinterview.com/index.php/java-questions/inner-vs-nested-classes/">difference between an inner and nested class in Java</a></li>
      <li><a href="http://stackoverflow.com/questions/1353309/java-static-vs-non-static-inner-class">difference between static and non-static nested classes(inner class)</a>
        <ul>
          <li>A static nested class does not have a reference to a nesting instance, so a static nested class cannot invoke non-static methods or access non-static fields of an instance of the class within which it is nested.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Leetcode | KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-06-30T15:51:31-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Valid Sudoku]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/30/valid-sudoku/"/>
    <updated>2014-06-30T15:45:57-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/30/valid-sudoku</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/valid-sudoku/">Question</a></p>

<hr />

<p>This is a simple question, as the <a href="http://sudoku.com.au/TheRules.aspx">rules</a> of a valid sudoku is already given. We just need to follow the rules to implement the function.</p>

<p>Here I convert int <em>i</em> to char by using (char)(‘0’ + i). The whole codes follows here:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">boolean</span> isValidSudoku(<span class="type">char</span><span class="type">[]</span><span class="type">[]</span> board) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="predefined-type">Set</span>&lt;<span class="predefined-type">Character</span>&gt; set1 = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="predefined-type">Set</span>&lt;<span class="predefined-type">Character</span>&gt; set2 = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; <span class="integer">9</span>; i++) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            setUp(set1);
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>            setUp(set2);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="integer">0</span>; j &lt; <span class="integer">9</span>; j++) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                <span class="type">char</span> num;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>                <span class="comment">// Each row must have the numbers 1-9 occuring just once.</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                <span class="keyword">if</span> ((num = board[i][j]) != <span class="string"><span class="delimiter">'</span><span class="content">.</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                    <span class="keyword">if</span> (set1.contains(num)) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                        set1.remove(num);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                        <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                    }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                <span class="comment">// Each column must have the numbers 1-9 occuring just once.</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                <span class="keyword">if</span> ((num = board[j][i]) != <span class="string"><span class="delimiter">'</span><span class="content">.</span><span class="delimiter">'</span></span>) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                    <span class="keyword">if</span> (set2.contains(num)) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                        set2.remove(num);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                        <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                    }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        <span class="comment">// the numbers 1-9 must occur just once in each of the 9 sub-boxes of</span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        <span class="comment">// the grid.</span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; <span class="integer">3</span>; i++) {
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="integer">0</span>; j &lt; <span class="integer">3</span>; j++) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                <span class="type">int</span> m = i * <span class="integer">3</span>;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                <span class="type">int</span> n = j * <span class="integer">3</span>;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                setUp(set1);
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                <span class="keyword">for</span> (<span class="type">int</span> k = m; k &lt; m + <span class="integer">3</span>; k++) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                    <span class="keyword">for</span> (<span class="type">int</span> l = n; l &lt; n + <span class="integer">3</span>; l++) {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                        <span class="type">char</span> num;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>                        <span class="keyword">if</span> ((num = board[k][l]) == <span class="string"><span class="delimiter">'</span><span class="content">.</span><span class="delimiter">'</span></span>)
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>                            <span class="keyword">continue</span>;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>                        <span class="keyword">if</span> (set1.contains(num)) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>                            set1.remove(num);
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>                            <span class="keyword">return</span> <span class="predefined-constant">false</span>;
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>                        }
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>                    }
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>                }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>            }
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>        }
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>        <span class="keyword">return</span> <span class="predefined-constant">true</span>;
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>    }
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>    <span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>    <span class="directive">public</span> <span class="type">void</span> setUp(<span class="predefined-type">Set</span>&lt;<span class="predefined-type">Character</span>&gt; set) {
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">1</span>; i &lt;= <span class="integer">9</span>; i++) {
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>            set.add((<span class="type">char</span>) (<span class="string"><span class="delimiter">'</span><span class="content">0</span><span class="delimiter">'</span></span> + i));
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>        }
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>    }
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Permutation Sequence]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/30/permutation-sequence/"/>
    <updated>2014-06-30T11:40:31-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/30/permutation-sequence</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/permutation-sequence/">Question</a></p>

<hr />

<p>We have already solved <a href="http://www.codertkk.com/blog/2014/06/29/next-permutation/">Next Permutation</a> question, with the help of this, we just need a loop to find the <em>k</em> th string. Here are the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="predefined-type">String</span> getPermutation(<span class="type">int</span> n, <span class="type">int</span> k) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="type">int</span><span class="type">[]</span> num = <span class="keyword">new</span> <span class="type">int</span>[n];
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; n; i++) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        num[i] = i + <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="integer">1</span>; i &lt; k; i++ ) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        nextPermutation(num);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="predefined-type">StringBuilder</span> sb = <span class="keyword">new</span> <span class="predefined-type">StringBuilder</span>();
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">for</span>(<span class="type">int</span> i : num) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        sb.append(i);
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span class="keyword">return</span> sb.toString();
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>}
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Next Permutation]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/29/next-permutation/"/>
    <updated>2014-06-29T22:33:09-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/29/next-permutation</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/next-permutation/">Question</a></p>

<hr />

<p>For this question, in order to get the <em>next</em> larger permutation, we need start from the last element, compare it with the previous element to see if it’s larger(if not, swapping them would make the number smaller). We start from index <em>arr.length</em> -2 to 0 to see which element could be swapped, say we are now at index i, then we use j to traverse from index <em>arr.length</em> -1 to i - 1 to see if arr[i] is smaller than arr[j], if so we can safely swap them(As if we come to index i, the elements from index i + 1 to <em>arr.length</em> -1 must be in decreasing order, otherwise, the swap would happen before i). After we swap, there need two things to be done, first we sort the array after index i(here I use <a href="http://www.sorting-algorithms.com/insertion-sort">insertion sort</a>), then we return directly. If the previous requirement not met, we simply sort and return.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">void</span> nextPermutation(<span class="type">int</span><span class="type">[]</span> num) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="type">int</span> lastIndex = num.length - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="keyword">for</span> (<span class="type">int</span> i = lastIndex - <span class="integer">1</span>; i &gt;= <span class="integer">0</span>; i--) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="keyword">for</span> (<span class="type">int</span> j = lastIndex; j &gt; i; j--) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            <span class="keyword">if</span> (num[i] &lt; num[j]) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>                swap(num, i, j);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                <span class="keyword">for</span> (<span class="type">int</span> m = i + <span class="integer">2</span>; m &lt;= num.length - <span class="integer">1</span>; m++) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>                    <span class="keyword">for</span> (<span class="type">int</span> n = m; n &gt; i + <span class="integer">1</span> &amp;&amp; num[n] &lt; num[n - <span class="integer">1</span>]; n--) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                        swap(num, n, n - <span class="integer">1</span>);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                    }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span class="predefined-type">Arrays</span>.sort(num);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>}
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="comment">/* Helper Functions */</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="directive">public</span> <span class="type">void</span> swap(<span class="type">int</span><span class="type">[]</span> num, <span class="type">int</span> i, <span class="type">int</span> j) {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span class="type">int</span> temp = num[i];
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    num[i] = num[j];
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    num[j] = temp;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>}
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Elements]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/29/remove-elements/"/>
    <updated>2014-06-29T18:28:09-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/29/remove-elements</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/remove-element/">Question</a></p>

<hr />

<p>This question is an easier version of <a href="http://www.codertkk.com/blog/2014/06/25/remove-duplicates-in-array/">Remove duplicates in array</a>. Below follows the code:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">int</span> removeElement(<span class="type">int</span><span class="type">[]</span> A, <span class="type">int</span> elem) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="type">int</span> offset = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; A.length; i++) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            <span class="keyword">if</span> (A[i] == elem) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>                offset++;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                A[i - offset] = A[i];
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">return</span> A.length - offset;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    }
</pre></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Num Sum]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/06/28/num-sum/"/>
    <updated>2014-06-28T11:39:45-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/06/28/num-sum</id>
    <content type="html"><![CDATA[<p>Questions:  </p>

<p><a href="https://oj.leetcode.com/problems/two-sum/"><strong>Two Sum</strong></a> </p>

<p><a href="https://oj.leetcode.com/problems/3sum/"><strong>Three Sum</strong></a> </p>

<p><strong>Two Sum</strong> : <br />
If we use brute force, the time complexity would be O(n^2), we can figure out a better way. Try to think like this, first we get an element(say, at index  <em>i</em>) of the array, next we can determine if <em>target</em>-<em>element</em> is in the array(with the help of other data structures like HashSet). As there would be only one solution, we can safely return if we can find <em>target</em>-<em>element</em>  in the array from index <em>i+1</em> to <em>arr.length-1</em>.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="directive">public</span> <span class="type">int</span><span class="type">[]</span> twoSum(<span class="type">int</span><span class="type">[]</span> numbers, <span class="type">int</span> target) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="type">int</span> len = numbers.length;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="predefined-type">Set</span>&lt;<span class="predefined-type">Integer</span>&gt; set = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; len; i++) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>            <span class="type">int</span> val = numbers[i];
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            set.add(val);
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; len; i++) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="type">int</span> goal = target - numbers[i];
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            <span class="keyword">if</span> (set.contains(goal)) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="integer">1</span>; j &lt; len; j++) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                    <span class="keyword">if</span>(numbers[j] == goal) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">int</span><span class="type">[]</span>{i + <span class="integer">1</span>, j + <span class="integer">1</span>};
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                    }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        <span class="keyword">return</span> <span class="predefined-constant">null</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    }
</pre></div>
</div>
</div>

<p><strong>Three Sum</strong>
With the help of three sum’s <a href="http://en.wikipedia.org/wiki/3SUM">wiki page</a>, we can get the following code. Note in order to eliminate duplicate arrays, we need take advantage of HashSet, which can automatically help determine if the elements of two arrayList are the same.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">Solution</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="predefined-type">List</span>&lt;<span class="predefined-type">List</span>&lt;<span class="predefined-type">Integer</span>&gt;&gt; sumList;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="predefined-type">Set</span>&lt;<span class="predefined-type">List</span>&lt;<span class="predefined-type">Integer</span>&gt;&gt; set;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="predefined-type">List</span>&lt;<span class="predefined-type">Integer</span>&gt; list;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="directive">public</span> <span class="predefined-type">List</span>&lt;<span class="predefined-type">List</span>&lt;<span class="predefined-type">Integer</span>&gt;&gt; threeSum(<span class="type">int</span><span class="type">[]</span> num) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="predefined-type">Arrays</span>.sort(num);
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        sumList = <span class="keyword">new</span> <span class="predefined-type">ArrayList</span>&lt;&gt;();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        set = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;&gt;();
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; num.length - <span class="integer">3</span>; i++) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="type">int</span> first = num[i];
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            <span class="type">int</span> j = i + <span class="integer">1</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="type">int</span> k = num.length - <span class="integer">1</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            <span class="keyword">while</span> (j &lt; k) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                <span class="type">int</span> second = num[j];
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                <span class="type">int</span> third = num[k];
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                <span class="type">int</span> result = first + second + third;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                <span class="keyword">if</span> (result == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                    list = <span class="keyword">new</span> <span class="predefined-type">ArrayList</span>&lt;&gt;();
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                    list.add(first);
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                    list.add(second);
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                    list.add(third);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                    set.add(list);
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>                    j++;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                    k--;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>                    <span class="keyword">if</span> (result &lt; <span class="integer">0</span>) {
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>                        j++;
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>                    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                        k--;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                    }
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                }
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>            }
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>        }
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>        sumList.addAll(set);
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>        <span class="keyword">return</span> sumList;
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>    }
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>}
</pre></div>
</div>
</div>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Io | KK's Coding Blog]]></title>
  <link href="http://tangkangkai.github.io/blog/categories/io/atom.xml" rel="self"/>
  <link href="http://tangkangkai.github.io/"/>
  <updated>2014-08-27T22:43:14-07:00</updated>
  <id>http://tangkangkai.github.io/</id>
  <author>
    <name><![CDATA[Kangkai Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Relearn Java Day11]]></title>
    <link href="http://tangkangkai.github.io/blog/2014/08/11/relearn-java-day11/"/>
    <updated>2014-08-11T09:49:41-07:00</updated>
    <id>http://tangkangkai.github.io/blog/2014/08/11/relearn-java-day11</id>
    <content type="html"><![CDATA[<ul>
  <li>Intro
    <ul>
      <li>memory -&gt; disk:
        <ul>
          <li>Output</li>
          <li>Write</li>
        </ul>
      </li>
      <li>disk -&gt; memory:
        <ul>
          <li>Input </li>
          <li>Read</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Byte Stream &amp; Character Stream
    <ul>
      <li>Byte Stream:
        <ul>
          <li>deal with one byte per time</li>
          <li>InputStream
            <ul>
              <li>FileInputStream</li>
            </ul>
          </li>
          <li>OutputStream
            <ul>
              <li>FileOutputStream</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Character Stream:
        <ul>
          <li>byte stream + code schedule, better for words communication</li>
          <li>Reader
            <ul>
              <li>FileReader</li>
              <li>BufferedReader
                <ul>
                  <li>increase the efficiency, read from buffer not disk</li>
                  <li>readLine()</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>Writer
            <ul>
              <li>OutputStreamWriter
                <ul>
                  <li>FileWriter</li>
                  <li>BufferedWriter
                    <ul>
                      <li>increase the efficiency</li>
                      <li>newLine()</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="predefined-type">FileReader</span> fr = <span class="keyword">new</span> <span class="predefined-type">FileReader</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">a.txt</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="predefined-type">FileWriter</span> fw = <span class="keyword">new</span> <span class="predefined-type">FileWriter</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">b.txt</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="type">char</span><span class="type">[]</span> buffer = <span class="keyword">new</span> <span class="type">char</span>[<span class="integer">1024</span>]
<span class="line-numbers"><a href="#n4" name="n4">4</a></span><span class="type">int</span> len;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span class="keyword">while</span>((len = fr.read(buffer)) != -<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    fw.write(buffer, <span class="integer">0</span>, len);
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>}
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="predefined-type">FileReader</span> fr = <span class="keyword">new</span> <span class="predefined-type">FileReader</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">a.txt</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="predefined-type">BufferedReader</span> br = <span class="keyword">new</span> <span class="predefined-type">BufferedReader</span>(fr);
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="predefined-type">FileWriter</span> fw = <span class="keyword">new</span> <span class="predefined-type">FileWriter</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">b.txt</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="predefined-type">BufferedWriter</span> bw = <span class="keyword">new</span> <span class="predefined-type">BufferedWriter</span>(fw);
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="predefined-type">String</span> len;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">while</span>((len = br.readLine()) != <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    bw.write(line);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    bw.newLine();
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    bw.flush();
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>Transfer between Byte Stream &amp; Character Stream
    <ul>
      <li>byte stream -&gt; character stream:
        <ul>
          <li>InputStreamReader(Input in)</li>
        </ul>
      </li>
      <li>character stream -&gt; byte stream:
        <ul>
          <li>OutputStreamWriter</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="predefined-type">BufferedReader</span> br = <span class="keyword">new</span> <span class="predefined-type">BufferedReader</span>(<span class="keyword">new</span> InputStreamReder(<span class="predefined-type">System</span>.in));
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="predefined-type">BufferedWriter</span> bw = <span class="keyword">new</span> <span class="predefined-type">BufferedWriter</span>(<span class="keyword">new</span> <span class="predefined-type">OutputStreamWriter</span>(<span class="predefined-type">System</span>.out));
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="predefined-type">String</span> line = <span class="predefined-constant">null</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="keyword">while</span> ((line = br.readLine()) != <span class="predefined-constant">null</span>) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="keyword">if</span> (<span class="string"><span class="delimiter">&quot;</span><span class="content">over</span><span class="delimiter">&quot;</span></span>.equals(line)) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="keyword">break</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    bw.write(line);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    bw.newLine();
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    bw.flush();
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
</pre></div>
</div>
</div>

<ul>
  <li>Basic rule
    <ul>
      <li>make sure the sourse &amp; destination
        <ul>
          <li>source: InputStream Reader</li>
          <li>destination: OutputStream Writer</li>
        </ul>
      </li>
      <li>make sure if the data is character
        <ul>
          <li>source: 
            <ul>
              <li>character : Reader</li>
              <li>byte : InputStream</li>
            </ul>
          </li>
          <li>destination:
            <ul>
              <li>character : Writer</li>
              <li>byte : OutputStream</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>make sure the device
        <ul>
          <li>source:
            <ul>
              <li>disk : File</li>
              <li>keyboard : System.in</li>
              <li>memory : array</li>
              <li>network : Socket stream</li>
            </ul>
          </li>
          <li>destination:
            <ul>
              <li>disk : File</li>
              <li>keyboard : System.out</li>
              <li>memory : array</li>
              <li>network : Socket stream</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>make sure if other function needed:
        <ul>
          <li>buffer: BufferedReader, BufferedWriter</li>
          <li>transfer: InputStreamReader, OutputStreamWriter</li>
          <li>Chinese character write to file according to coding schedule
            <ul>
              <li>FileWriter : ByteStream + default coding schedule</li>
              <li>If coding schedule specified, need OutputStreamWriter()</li>
              <li>same with Reader and InputStreamReader()</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
